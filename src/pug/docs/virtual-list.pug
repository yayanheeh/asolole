extends ../_docs-template

block vars
  - var title = 'Virtual List | Framework7 Documentation';

block content
  include ../_docs-demo-device
  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Virtual List
    ul.docs-index
    p Virtual List allows to render lists with huge amount of elements without loss of performance. And it is fully compatible with all Framework7 components which work with lists such as Search Bar, Infinite Scroll, Pull To Refresh, Swipeouts (swipe-to-delete) and Sortable.
    h2 Virtual List Layout
    p Virtual List HTML layout is pretty simple, it is almost the same as for usual <a href="list-view.html">List View</a> with only difference: you need to leave it empty:
    :code(lang="html")
          &lt;!-- Virtual List --&gt;
          &lt;div class="list virtual-list"&gt;
            &lt;!-- keep it empty --&gt;
          &lt;/div&gt;
    p Where:
    ul
      li
        p <code>virtual-list</code> - required additional class on any list block that uses Virtual List

    h2 Virtual List App Methods
    p Now, when we have list's HTML, we need to initialize it. We need to use required App method:
    .method-wrap
      p
        span.method app.virtualList.create(<span>parameters</span>)
        span - initialize virtual list with parameters
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span> - object with virtual list parameters. Required.

        li.method-returns Method returns initialized Virtual List instance
    .method-wrap
      p
        span.method app.virtualList.destroy(<span>el</span>)
        | - destroy Virtual List instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Virtual List element or Virtual List instance to destroy.
    .method-wrap
      p
        span.method app.virtualList.get(<span>el</span>)
        | - get Virtual List instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Virtual List element.
      p.method-returns Method returns Virtual List's instance
    .important-note
      p Note that Virtual List container (list block element) should be in DOM on a moment of initialization.
    h2 Virtual List Parameters
    p Let's look on list of all available parameters:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement<br>string
          td
          td Target List Block element. In case of <code>string</code> - CSS selector of list block element
        tr
          td ul
          td HTMLElement<br>string
          td
          td List element <code>&lt;ul&gt;</code> inside of List block.
        tr
          td createUl
          td boolean
          td true
          td Will automatically create <code>&lt;ul&gt;</code> element inside of Virtual List block. If disabled, then virtual list can be used on any block element without <code>ul &gt; li</code> structure
        tr
          td items
          td array
          td
          td Array with list items
        tr
          td rowsBefore
          td number
          td
          td Amount of rows (items) to be rendered before current screen scroll position. By default it is equal to double amount of rows (items) that fit to screen
        tr
          td rowsAfter
          td number
          td
          td Amount of rows (items) to be rendered after current screen scroll position. By default it is equal to the amount of rows (items) that fit to screen
        tr
          td cols
          td number
          td 1
          td Number of items per row. Doesn't compatible when using Virtual List with dynamic height
        tr
          td height
          td number or function(item)
          td
          td If <code>number</code> - list item height in px. If <code>function</code> then function should return item height. By default equals to <code>44</code> for iOS theme and <code>48</code> for MD theme
        tr
          td itemTemplate
          td string<br>function
          td
          td Template7 string template or Template7 compiled template that used to render single item. Template should contain full HTML layout for single item, including wrapping <code>&lt;li&gt;&lt;/li&gt;</code> tags
        tr
          td renderItem
          td function(item)
          td
          td This optional function allows to use custom function to render item HTML. It could be used instead of <b>template</b> parameter
        tr
          td renderExternal
          td function(renderParameters)
          td
          td This optional function allows to render DOM items using some custom method. Useful in case it is used (e.g.) with Vue/React plugin to pass DOM rendering and manipulation to Vue/React. <code>renderParameters</code> conaints object with the following properties: <code>fromIndex</code>, <code>toIndex</code>, <code>listHeight</code>, <code>topPosition</code>, <code>items</code>
        tr
          td emptyTemplate
          td string
          td
          td Defines list item template for the case if empty data passed
        tr
          td dynamicHeightBufferSize
          td number
          td 1
          td This parameter allows to control buffer size on Virtual Lists with dynamic height (when <code>height</code> parameter is function) as a buffer size multiplier
        tr
          td cache
          td boolean
          td true
          td Disable or enable DOM cache for already rendered list items. In this case each item will be rendered only once and all futher manipulations will be with DOM element. It is useful if your list items have some user interaction elements (like form elements or swipe outs) or could be modified
        tr
          td updatableScroll
          td boolean
          td
          td Is the current device updates and handles scroll events during scroll. By default (if not specified) it is "false" for all iOS devices with iOS version less than 8.
        tr
          td setListHeight
          td boolean
          td true
          td Will set height on list block if enabled
        tr
          td showFilteredItemsOnly
          td boolean
          td false
          td Option to show filtered items only set by `filter()` method
        tr
          th(colspan="4") Searchbar
        tr
          td searchByItem
          td function(query, item, index)
          td
          td Search function that will be used by <a href="searchbar.html">Searchbar</a>, it receives search query, item itself and item index. If item matches to search query you need to return <code>true</code>, otherwise this function should return <code>false</code>
        tr
          td searchAll
          td function(query, items)
          td
          td Search function that will be used by <a href="searchbar.html">Searchbar</a>, it receives search query and array with all items. You need to loop through items and return array with indexes of matched items
    h2 Virtual List Methods & Properties
    p So to create Virtual List we have to call:
    :code(lang="js")
          var virtualList = app.virtualList.create({ /* parameters */ })
    p After we initialize Virtual List we have its initialized instance in variable (like <code>virtualList</code> variable in example above) with helpful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td virtualList.items
          td Array with items
        tr
          td virtualList.filteredItems
          td Array with filtered items (after using ".filterItems" method)
        tr
          td virtualList.domCache
          td Object with cached dom items
        tr
          td virtualList.params
          td Parameters passed on list initialization
        tr
          td virtualList.el
          td Virtual list target list block element
        tr
          td virtualList.$el
          td Dom7 instance of target list block element
        tr
          td virtualList.pageContentEl
          td Parent "page-content" element
        tr
          td virtualList.$pageContentEl
          td Dom7 instance of parent "page-content" element
        tr
          td virtualList.currentFromIndex
          td Index number of currently first rendered item
        tr
          td virtualList.currentToIndex
          td Index number of currently last rendered item
        tr
          td virtualList.reachEnd
          td Boolean property. Equals <code>true</code> if the currently last rendered item is the last item of all specified items
        tr
          th(colspan="2") Methods
        tr
          td virtualList.filterItems(<span>indexes</span>);
          td Filter virtual list by passing array with indexes of items to show
        tr
          td virtualList.resetFilter();
          td Disable filter and display all items again

        tr
          td virtualList.appendItem(<span>item</span>);
          td Append item to virtual list
        tr
          td virtualList.appendItems(<span>items</span>);
          td Append array with items to virtual list
        tr
          td virtualList.prependItem(<span>item</span>);
          td Prepend item to virtual list
        tr
          td virtualList.prependItems(<span>items</span>);
          td Prepend array with items to virtual list
        tr
          td virtualList.replaceItem(<span>index, items</span>);
          td Replace item at specified index with the new one
        tr
          td virtualList.replaceAllItems(<span>items</span>);
          td Replace all items with arrays of new items
        tr
          td virtualList.moveItem(<span>oldIndex, newIndex</span>);
          td Move virtual item from oldIndex to newIndex
        tr
          td virtualList.insertItemBefore(<span>index, item</span>);
          td Insert new item before item with specified index
        tr
          td virtualList.deleteItem(<span>index</span>);
          td Delete item at specified index
        tr
          td virtualList.deleteItems(<span>indexes</span>);
          td Delete items at specified array of indexes
        tr
          td virtualList.deleteAllItems();
          td Delete all items
        tr
          td virtualList.clearCache();
          td Clear virtual list cached DOM elements
        tr
          td virtualList.destroy();
          td Destory initialized virtual list and detach all events
        tr
          td virtualList.update();
          td Update virtual list, including recalculation of list sizes and re-rendering of virtual list
        tr
          td virtualList.scrollToItem(index);
          td Scroll Virtual List to specified item by its index number
    h2 Virtual List Events
    p Virtual List will fire the following events on app and virtual list instance:
    p Virtual List instance emits events on both self instance and app instance. App instance events has same names prefixed with <code>vl</code>.
    table.events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td itemBeforeInsert
          td virutalList
          td(rowspan="2") <span>virtualList, itemEl, item</span>
          td(rowspan="2") Event will be triggered before item will be added to virtual document fragment
        tr
          td vlItemBeforeInsert
          td app

        tr
          td itemsBeforeInsert
          td virutalList
          td(rowspan="2") <span>virtualList, fragment</span>
          td(rowspan="2") Event will be triggered after current DOM list will be removed and before new document will be inserted
        tr
          td vlItemsBeforeInsert
          td app

        tr
          td beforeClear
          td virutalList
          td(rowspan="2") <span>virtualList, fragment</span>
          td(rowspan="2") Event will be triggered before current DOM list will be removed and replaced with new document fragment
        tr
          td vlBeforeClear
          td app

        tr
          td itemsAfterInsert
          td virutalList
          td(rowspan="2") <span>virtualList, fragment</span>
          td(rowspan="2") Event will be triggered after new document fragment with items inserted
        tr
          td vlItemsAfterInsert
          td app

    .with-device
      h2(data-device-preview="../docs-demos/core/virtual-list.html") Examples
      :code(lang="html")
            <div class="page">
              <div class="navbar">
                <div class="navbar-inner sliding">
                  <div class="title">Virtual List</div>
                  <div class="subnavbar">
                    <form data-search-container=".virtual-list" data-search-item="li" data-search-in=".item-title" class="searchbar searchbar-init">
                      <div class="searchbar-inner">
                        <div class="searchbar-input-wrap">
                          <input type="search" placeholder="Search"/>
                          <i class="searchbar-icon"></i>
                          <span class="input-clear-button"></span>
                        </div>
                        <span class="searchbar-disable-button">Cancel</span>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
              <div class="searchbar-backdrop"></div>
              <div class="page-content">
                <div class="list simple-list searchbar-not-found">
                  <ul>
                    <li>Nothing found</li>
                  </ul>
                </div>
                <div class="list virtual-list media-list searchbar-found"></div>
              </div>
            </div>
      :code(lang="js")
            var app = new Framework7();

            // Dummy items array
            var items = [];
            for (var i = 1; i <= 10000; i++) {
              items.push({
                title: 'Item ' + i,
                subtitle: 'Subtitle ' + i
              });
            }

            var virtualList = app.virtualList.create({
              // List Element
              el: '.virtual-list',
              // Pass array with items
              items: items,
              // Custom search function for searchbar
              searchAll: function (query, items) {
                var found = [];
                for (var i = 0; i < items.length; i++) {
                  if (items[i].title.toLowerCase().indexOf(query.toLowerCase()) >= 0 || query.trim() === '') found.push(i);
                }
                return found; //return array with mathced indexes
              },
              // List item Template7 template
              itemTemplate:
                '<li>' +
                  '<a href="#" class="item-link item-content">' +
                    '<div class="item-inner">' +
                      '<div class="item-title-row">' +
                        '<div class="item-title">{{title}}</div>' +
                      '</div>' +
                      '<div class="item-subtitle">{{subtitle}}</div>' +
                    '</div>' +
                  '</a>' +
                '</li>',
              // Item height
              height: app.theme === 'ios' ? 63 : 73,
            });


