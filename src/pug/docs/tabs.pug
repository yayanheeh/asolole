extends ../_docs-template

block vars
  - var title = 'Tabs | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Tabs
    ul.docs-index
    p Tabs allow to simply switch between different content.
    h2 Tabs Layout
    p Let's look at Tabs layout:
    :code(lang="html")
          <!-- Tabs wrapper, shoud have "tabs" class. Required element -->
          <div class="tabs">
            <!-- First tab, should have "tab" class and unique id attribute -->
            <!-- First tab is active by default - additional "tab-active" class -->
            <div class="tab tab-active" id="tab1">
              ... Tab 1 content goes here ...
            </div>
            <!-- Second tab, should have "tab" class and unique id attribute -->
            <div class="tab" id="tab2">
              ... Tab 2 content goes here ...
            </div>
            <!-- Third tab, should have "tab" class and unique id attribute -->
            <div class="tab" id="tab3">
              ... Tab 3 content goes here ...
            </div>
          </div>
    p Where:
    ul
      li <code>div class="tabs"</code> - required wrapper for all tabs. If you miss this element, tabs will not work!
      li <code>div class="tab"</code> - single tab. Should have <strong>unique</strong> <code>id</code> attribute
      li <code>div class="tab tab-active"</code> - single active tab. Tab which is active (visible) by default, should have additional <code><b>tab-active</b></code> class
    h3 Scrollable Tabs
    p If you put tabs inside of scrollable <code>&lt;div class="page-content"&gt;</code> then they will have mutual scrolling - scrolling one tab will basically scroll the all tabs as well. To avoid this (if this is a case), it is recommended to make each tab as page-content, in this case each tab will have own scrolling:
    :code(lang="html")
          <div class="page">
            <div class="navbar">...</div>
            <!-- tabs is a direct child of page -->
            <div class="tabs">
              <!-- each tabs is a "page-content" -->
              <div class="page-content tab tab-active" id="tab1">
                ... Tab 1 content goes here ...
              </div>
              <div class="page-content tab" id="tab2">
                ... Tab 2 content goes here ...
              </div>
              <!-- Third tab, should have "tab" class and unique id attribute -->
              <div class="page-content tab" id="tab3">
                ... Tab 3 content goes here ...
              </div>
            </div>
          </div>
    h2 Switching Between Tabs
    p After we have our tabs layout we need some contoller so user can switch between them.
    p To make it work we need to create links (<code>&lt;a&gt;</code> tags) with <code><strong>tab-link</strong></code> class and <code>href</code> attribute equal to the <code>id</code> attribute of target tab:
    :code(lang="html")
           &lt;!-- Link that activates first tab, has the same href attribute (#tab1) as the id attribute of first tab (tab1)  --&gt;
           &lt;a href="#tab1" class="tab-link tab-link-active"&gt;Tab 1&lt;/a&gt;

           &lt;!-- Link that activates 2nd tab, has the same href attribute (#tab2) as the id attribute of 2nd tab (tab2)  --&gt;
           &lt;a href="#tab2" class="tab-link"&gt;Tab 2&lt;/a&gt;

           &lt;!-- Link that activates 3rd tab, has the same href attribute (#tab2) as the id attribute of 3rd tab (tab3)  --&gt;
           &lt;a href="#tab3" class="tab-link"&gt;Tab 3&lt;/a&gt;
    .important-note
      p As you may see, first link also has <code><strong>tab-link-active</strong></code> class. It is not required, but if all such links will be on the same DOM tree level (the same-level children of mutual parent), then script will also change this <code>tab-link-active</code> class on link related to the active tab. It is useful when your "active" link has different visual style (like buttons in <a href="button.html#segmented-control">Segmented Control</a> or links in <a href="toolbar-tabbar.html#tabbar">Tabbar</a>)
    h2 Switch Multiple Tabs
    p Such notation as above uses ID attributes to specify tabs we need to switch to. But sometimes we may have situation when we need to switch few tabs using one tab-link, for this case we may use classes instead of IDs and <code><b>data-tab</b></code> attribute for tab-link. For example:
    :code(lang="html")
          <!-- Top Tabs -->
          <div class="tabs tabs-top">
            <div class="tab tab1 tab-active">...</div>
            <div class="tab tab2">...</div>
            <div class="tab tab3">...</div>
          </div>
          <!-- Bottom Tabs -->
          <div class="tabs tabs-bottom">
            <div class="tab tab1 tab-active">...</div>
            <div class="tab tab2">...</div>
            <div class="tab tab3">...</div>
          </div>
          <!-- Tabs links -->
          <div>
            <!-- This links will switch top and bottom tabs to .tab1 -->
            <a href="#" class="tab-link tab-link-active" data-tab=".tab1">Tab 1</a>
            <!-- This links will switch top and bottom tabs to .tab2 -->
            <a href="#" class="tab-link" data-tab=".tab2">Tab 2</a>
            <!-- This links will switch top and bottom tabs to .tab3 -->
            <a href="#" class="tab-link" data-tab=".tab3">Tab 3</a>
          </div>
    p Where <code><b>data-tab</b></code> attribute of tab-link with CSS selector of target tab/tabs
    h2 Views As Tabs
    p Why single Tab could not be a seprate View with its own navigation and layout? It can, so you can just switch Views as tabs. In this case we will have kind of Tabbed app structure, where each tab represents separate View:
    :code(lang="html")
          <body>
            <!-- App root -->
            <div id="app">
              <!-- Views/Tabs container -->
              <div class="views tabs">
                <!--
                  Tabbar for switching views-tabs. Should be a first child in Views.
                  Additional "toolbar-bottom-md" class is also required here for MD theme
                -->
                <div class="toolbar tabbar-labels toolbar-bottom-md">
                  <div class="toolbar-inner">
                    <a href="#view-home" class="tab-link tab-link-active">
                      <i class="icon icon-home"></i>
                    </a>
                    <a href="#view-catalog" class="tab-link">
                      <i class="icon icon-catalog"></i>
                    </a>
                    <a href="#view-settings" class="tab-link">
                      <i class="icon icon-settings"></i>
                    </a>
                  </div>
                </div>
                <!-- Your main view/tab, should have "view-main" class. It also has "tab-active" class -->
                <div id="view-home" class="view view-main tab tab-active">
                  ...
                </div>

                <!-- Catalog View -->
                <div id="view-catalog" class="view tab">
                  ...
                </div>

                <!-- Settings View -->
                <div id="view-settings" class="view tab">
                  ...
                </div>
              </div>
            </div>
            ...
          </body>


    h2 Animated Tabs
    p It is also possible to switch tabs with simple transition. This requires additional <code><b>div class="tabs-animated-wrap"</b></code> wrapper for <code>div class="tabs"</code>:
    :code(lang="html")
          <!-- Tabs animated wrapper, required to switch tabs with transition -->
          <div class="tabs-animated-wrap">

            <!-- Tabs, tabs wrapper -->
            <div class="tabs">
              <!-- Tab 1, active by default -->
              <div id="tab1" class="tab tab-active">
                ... Tab 1 content ...
              </div>

              <!-- Tab 2 -->
              <div id="tab2" class="tab">
                ... Tab 2 content ...
              </div>

              <!-- Tab 3 -->
              <div id="tab3" class="tab">
                ... Tab 3 content ...
              </div>
            </div>
          </div>
    .important-note
      p Note that animted tabs wrapper <code>div class="tabs-animated-wrap"</code> must have <b>fixed height</b>. By default, it is 100% height of its parent

    h2 Swipeable Tabs
    p It is also possible to switch tabs with swipes. This requires additional <code><b>div class="tabs-swipeable-wrap"</b></code> wrapper for <code>div class="tabs"</code>.
    p In this example let's put tab links in Subnavbar and we will use <b>page-content</b> as <b>tab</b> to keep scrolling position for each tab separately:
    :code(lang="html")
          <!-- Tabs swipeable wrapper, required to switch tabs with swipes -->
          <div class="tabs-swipeable-wrap">
            <!-- Tabs, tabs wrapper -->
            <div class="tabs">
              <!-- Tab 1, active by default -->
              <div id="tab1" class="tab tab-active">
                ... Tab 1 content ...
              </div>
              <!-- Tab 2 -->
              <div id="tab2" class="tab">
                ... Tab 2 content ...
              </div>
              <!-- Tab 3 -->
              <div id="tab3" class="tab">
                ... Tab 3 content ...
              </div>
            </div>
          </div>
    p To achieve swipeable effect, swipeable tabs are actually will be converted to <a href="swiper.html">Swiper</a>, so it is possible to tweak their behavior by passing <a href="swiper.html#swiper-auto-initialization">Swiper parameters</a> using <code>data-</code> attributes.

    h2 Tabs App Methods
    p We can control tabs using the following app methods:
    .method-wrap
      p
        span.method app.tab.show(<span>tabEl</span>, <span>animate</span>)
      ul.method-parameters
        li
          span.parameter tabEl
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of Tab to show. Requred
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span> - Should it become visible with animation or not (in case of animated or swipeable tabs). <em>Optional</em>
        li.method-returns This method returns object with <code>newTabEl</code> and <code>oldTabEl</code> properties with shown and hidden tabs HTML elements
    .method-wrap
      p
        span.method app.tab.show(<span>tabEl</span>, <span>tabLinkEl</span>, <span>animate</span>)
      ul.method-parameters
        li
          span.parameter tabEl
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of Tab to show. Requred
        li
          span.parameter tabLinkEl
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of Tab link/button to be activated with this tab. Useful to pass in case you have a complex layout to tell Framework7 which tab link/button must be activated
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span> - Should it become visible with animation or not (in case of animated or swipeable tabs). <em>Optional</em>
        li.method-returns This method returns object with <code>newTabEl</code> and <code>oldTabEl</code> properties with shown and hidden tabs HTML elements

    h2 Tabs Events
    p Tabs will fire the following DOM events on tab elements and events on app instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td tab:show
          td Tab Element<span>&lt;div class="tab"&gt;</span>
          td Event will be triggered when Tab becomes visible/active
        tr
          td tab:hide
          td Tab Element<span>&lt;div class="tab"&gt;</span>
          td Event will be triggered when Tab becomes hidden/inactive
    h3 App Instance Events
    p There are app instance events as well:
    table.events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td tabShow
          td <span>tabEl</span>
          td app
          td Event will be triggered when Tab becomes visible/active. As an argument event handler receives tab that became visible
        tr
          td tabHide
          td <span>tabEl</span>
          td app
          td Event will be triggered when Tab becomes hidden/inactive. As an argument event handler receives tab that became hidden

    h2 Routable Tabs
    p Tabs can be routable. What routable tabs means and why is it good?
    ul
      li First of all, it provides opportunity to navigate to tabs by usual links instead of so called special tab-links.
      li Second, when navigating to such tab routes you can load a page with required tab opened.
      li Third, with enabled Push State, the same tab will be opened when you navigate back and forward in history.
      li And the last but not least, when using routable tabs you can load tab content in the same ways as for pages, i.e. using <code>url</code>, <code>content</code>, <code>template</code>, <code>templateUrl</code>, <code>component</code> or <code>componentUrl</code>
    p First of all we need to specify tabs routes in app routes. Let's assume we have a page with routable tabs on <code>/tabs/</code> route:
    :code(lang="js")
          routes = [
            {
              // Page main route
              path: '/tabs/',
              // Will load page from tabs/index.html file
              url: './pages/tabs/index.html',
              // Pass "tabs" property to route, must be array with tab routes:
              tabs: [
                // First (default) tab has the same url as the page itself
                {
                  // Tab path
                  path: '/',
                  // Tab id
                  id: 'tab-1',
                  // Fill this tab content from content string
                  content: `
                    <div class="block">
                      <h3>About Me</h3>
                      <p>...</p>
                    </div>
                  `
                },
                // Second tab
                {
                  path: '/tab-2/',
                  id: 'tab-2',
                  // Fill this tab content with Ajax request:
                  url: './pages/tabs/tab-2.html',
                },
                // Third tab
                {
                  path: '/tab-3/',
                  id: 'tab-3',
                  // Load this tab content as a component with Ajax request:
                  componentUrl: './pages/tabs/tab-3.html',
                },
              ],
            }
          ]
    p On the <code>/tabs/index.html</code> page we may have the following structure, for example:
    :code(lang="html")
          <div class="page">
            <div class="navbar">
              <div class="navbar-inner">
                <div class="title">Routable Tabs</div>
              </div>
            </div>
            <div class="toolbar tabbar">
              <div class="toolbar-inner">
                <!-- additional "data-route-tab-id" must match to tab's ID in the specified routes -->
                <a href="/" class="tab-link" data-route-tab-id="tab-1">Tab 1</a>
                <a href="/tab-2/" class="tab-link" data-route-tab-id="tab-2">Tab 2</a>
                <a href="/tab-3/" class="tab-link" data-route-tab-id="tab-3">Tab 3</a>
              </div>
            </div>
            <!-- Additional "tabs-routable" is required on tabs -->
            <div class="tabs tabs-routable">
              <div class="tab page-content" id="tab-1"></div>
              <div class="tab page-content" id="tab-2"></div>
              <div class="tab page-content" id="tab-3"></div>
            </div>
          </div>
    p Almost the same as with usual tabs but with the difference that there is no more "tab-link-active" and "tab-active" classes on tab links and tabs. These classes and tabs will be switched by router. And there is a new attribute and class:
    ul
      li <code>data-route-tab-id</code> - additional tab link attribute which is required for tabs switcher to understand which link related to the required route
      li <code>tabs-routable</code> - required additional class on <code>tabs</code> element
    .important-note
      p
        b Note that Views can not be used as Routable Tabs. Routable Tabs can be used only inside of View/Router!
    h3 Routable Tabs Events
    p Router will fire the following DOM events on tab elements and events on router/view/app instance when routable tab content is loaded:
    h4 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td tab:init<br>tab:mounted
          td Tab Element<span>&lt;div class="tab"&gt;</span>
          td Event will be triggered right after routable Tab content will be loaded
        tr
          td tab:beforeremove
          td Tab Element<span>&lt;div class="tab"&gt;</span>
          td Event will be triggered right before routab Tab content will be removed
    h4 Router Instance Events
    p Router instance emits events on both self instance, then on its parent <code>view</code> instance and <code>app</code> instance:
    table.events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td tabInit<br>tabMounted
          td router<br>view<br>app
          td <span>(newTabEl, tabRoute)</span>
          td Event will be triggered right after routable Tab content will be loaded. As an argument event handler receives:
            ul
              li <code>newTabEl</code> - tab HTML element where route content was just loaded (new tab)
              li <code>tabRoute</code> - new tab route
        tr
          td tabBeforeRemove
          td router<br>view<br>app
          td <span>(oldTabEl, newTabEl, tabRoute)</span>
          td Event will be triggered right before routable Tab content will be removed. As an argument event handler receives:
            ul
              li <code>oldTabEl</code> - tab HTML element where route content was just removed (old tab)
              li <code>newTabEl</code> - tab HTML element where route content was just loaded (new tab)
              li <code>tabRoute</code> - new tab route

    .with-device
      h2(data-device-preview="../docs-demos/core/tabs.html") Examples
      h3 Static Tabs
      :code(lang="html")
            <div class="page">
              <div class="navbar">
                <div class="navbar-inner sliding">
                  <div class="left">
                      <a href="#" class="link back">
                        <i class="icon icon-back"></i>
                        <span class="ios-only">Back</span>
                      </a>
                    </div>
                  <div class="title">Static Tabs</div>
                </div>
              </div>
              <div class="toolbar tabbar">
                <div class="toolbar-inner">
                  <a href="#tab-1" class="tab-link tab-link-active">Tab 1</a>
                  <a href="#tab-2" class="tab-link">Tab 2</a>
                  <a href="#tab-3" class="tab-link">Tab 3</a>
                </div>
              </div>
              <div class="tabs">
                <div id="tab-1" class="page-content tab tab-active">
                  <div class="block">
                    <p>Tab 1 content</p>
                    ...
                  </div>
                </div>
                <div id="tab-2" class="page-content tab">
                  <div class="block">
                    <p>Tab 2 content</p>
                    ...
                  </div>
                </div>
                <div id="tab-3" class="page-content tab">
                  <div class="block">
                    <p>Tab 3 content</p>
                    ...
                  </div>
                </div>
              </div>
            </div>
      h3 Animated Tabs
      :code(lang="html")
            <div class="page">
              <div class="navbar">
                <div class="navbar-inner sliding">
                  <div class="left">
                    <a href="#" class="link back">
                      <i class="icon icon-back"></i>
                      <span class="ios-only">Back</span>
                    </a>
                  </div>
                  <div class="title">Animated Tabs</div>
                </div>
              </div>
              <div class="toolbar tabbar">
                <div class="toolbar-inner">
                  <a href="#tab-1" class="tab-link tab-link-active">Tab 1</a>
                  <a href="#tab-2" class="tab-link">Tab 2</a>
                  <a href="#tab-3" class="tab-link">Tab 3</a>
                </div>
              </div>
              <div class="tabs-animated-wrap">
                <div class="tabs">
                  <div id="tab-1" class="page-content tab tab-active">
                    <div class="block">
                      <p>Tab 1 content</p>
                      ...
                    </div>
                  </div>
                  <div id="tab-2" class="page-content tab">
                    <div class="block">
                      <p>Tab 2 content</p>
                      ...
                    </div>
                  </div>
                  <div id="tab-3" class="page-content tab">
                    <div class="block">
                      <p>Tab 3 content</p>
                      ...
                    </div>
                  </div>
                </div>
              </div>
            </div>

      h3 Swipeable Tabs
      :code(lang="html")
            <div class="page">
              <div class="navbar">
                <div class="navbar-inner sliding">
                  <div class="left">
                    <a href="#" class="link back">
                      <i class="icon icon-back"></i>
                      <span class="ios-only">Back</span>
                    </a>
                  </div>
                  <div class="title">Swipeable Tabs</div>
                </div>
              </div>
              <div class="toolbar tabbar">
                <div class="toolbar-inner">
                  <a href="#tab-1" class="tab-link tab-link-active">Tab 1</a>
                  <a href="#tab-2" class="tab-link">Tab 2</a>
                  <a href="#tab-3" class="tab-link">Tab 3</a>
                </div>
              </div>
              <div class="tabs-swipeable-wrap">
                <div class="tabs">
                  <div id="tab-1" class="page-content tab tab-active">
                    <div class="block">
                      <p>Tab 1 content</p>
                      ...
                    </div>
                  </div>
                  <div id="tab-2" class="page-content tab">
                    <div class="block">
                      <p>Tab 2 content</p>
                      ...
                    </div>
                  </div>
                  <div id="tab-3" class="page-content tab">
                    <div class="block">
                      <p>Tab 3 content</p>
                      ...
                    </div>
                  </div>
                </div>
              </div>
            </div>

      h3 Routable Tabs
      :code(lang="js")
            var app = new Framework7({
              routes: [
                {
                  path: '/tabs-routable/',
                  template: tabsRoutable,
                  tabs: [
                    {
                      path: '/',
                      id: 'tab1',
                      content: ' \
                      <div class="block"> \
                        <p>Tab 1 content</p> \
                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam enim quia molestiae facilis laudantium voluptates obcaecati officia cum, sit libero commodi. Ratione illo suscipit temporibus sequi iure ad laboriosam accusamus?</p> \
                        <p>Saepe explicabo voluptas ducimus provident, doloremque quo totam molestias! Suscipit blanditiis eaque exercitationem praesentium reprehenderit, fuga accusamus possimus sed, sint facilis ratione quod, qui dignissimos voluptas! Aliquam rerum consequuntur deleniti.</p> \
                        <p>Totam reprehenderit amet commodi ipsum nam provident doloremque possimus odio itaque, est animi culpa modi consequatur reiciendis corporis libero laudantium sed eveniet unde delectus a maiores nihil dolores? Natus, perferendis.</p> \
                      </div> \
                      ',
                    },
                    {
                      path: '/tab2/',
                      id: 'tab2',
                      content: '\
                      <div class="block"> \
                        <p>Tab 2 content</p> \
                        <p>Suscipit, facere quasi atque totam. Repudiandae facilis at optio atque, rem nam, natus ratione cum enim voluptatem suscipit veniam! Repellat, est debitis. Modi nam mollitia explicabo, unde aliquid impedit! Adipisci!</p> \
                        <p>Deserunt adipisci tempora asperiores, quo, nisi ex delectus vitae consectetur iste fugiat iusto dolorem autem. Itaque, ipsa voluptas, a assumenda rem, dolorum porro accusantium, officiis veniam nostrum cum cumque impedit.</p> \
                        <p>Laborum illum ipsa voluptatibus possimus nesciunt ex consequatur rem, natus ad praesentium rerum libero consectetur temporibus cupiditate atque aspernatur, eaque provident eligendi quaerat ea soluta doloremque. Iure fugit, minima facere.</p> \
                      </div> \
                      ',
                    },
                    {
                      path: '/tab3/',
                      id: 'tab3',
                      content: '\
                      <div class="block"> \
                        <p>Tab 3 content</p> \
                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam enim quia molestiae facilis laudantium voluptates obcaecati officia cum, sit libero commodi. Ratione illo suscipit temporibus sequi iure ad laboriosam accusamus?</p> \
                        <p>Deserunt adipisci tempora asperiores, quo, nisi ex delectus vitae consectetur iste fugiat iusto dolorem autem. Itaque, ipsa voluptas, a assumenda rem, dolorum porro accusantium, officiis veniam nostrum cum cumque impedit.</p> \
                        <p>Laborum illum ipsa voluptatibus possimus nesciunt ex consequatur rem, natus ad praesentium rerum libero consectetur temporibus cupiditate atque aspernatur, eaque provident eligendi quaerat ea soluta doloremque. Iure fugit, minima facere.</p> \
                      </div> \
                      ',
                    },
                  ],
                },
              ]
            });
      :code(lang="html")
            <div class="page">
              <div class="navbar">
                <div class="navbar-inner sliding">
                  <div class="left">
                    <a href="#" class="link back">
                      <i class="icon icon-back"></i>
                      <span class="ios-only">Back</span>
                    </a>
                  </div>
                  <div class="title">Tabs Routable</div>
                </div>
              </div>
              <div class="toolbar tabbar">
                <div class="toolbar-inner">
                  <a href="./" class="tab-link" data-route-tab-id="tab1">Tab 1</a>
                  <a href="tab2/" class="tab-link" data-route-tab-id="tab2">Tab 2</a>
                  <a href="tab3/" class="tab-link" data-route-tab-id="tab3">Tab 3</a>
                </div>
              </div>
              <div class="tabs tabs-routable">
                <div class="page-content tab" id="tab1"></div>
                <div class="page-content tab" id="tab2"></div>
                <div class="page-content tab" id="tab3"></div>
              </div>
            </div>
