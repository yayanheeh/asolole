extends ../_docs-template

block vars
  - var title = 'Autocomplete | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Autocomplete
    ul.docs-index
    p Framework7 comes with mobile-friendly and touch optimized Autocomplete component.
    p Autocomplete could be used in standalone mode or as a dropdown.
    h2 Autocomplete App Methods
    p Autocomplete can be created and initialized only using JavaScript. We need to use related App's method:
    .method-wrap
      p
        span.method app.autocomplete.create(<span>parameters</span>)
        | - create Autocomplete instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with autocomplete parameters
      p.method-returns Method returns created Autocomplete's instance

    .method-wrap
      p
        span.method app.autocomplete.destroy(<span>el</span>)
        | - destroy Autocomplete instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Autocomplete instance to destroy.
    .method-wrap
      p
        span.method app.autocomplete.get(<span>el</span>)
        | - get Autocomplete instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Autocomplete element.
      p.method-returns Method returns Autocomplete's instance
    .method-wrap
      p
        span.method app.autocomplete.open(<span>el</span>)
        | - open Autocomplete
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Autocomplete element to open.
      p.method-returns Method returns Autocomplete's instance
    .method-wrap
      p
        span.method app.autocomplete.close(<span>el</span>)
        | - closes Autocomplete
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Autocomplete element to close.
      p.method-returns Method returns Autocomplete's instance
    p For example:
    :code(lang="js")
          var autocomplete = app.autocomplete.create({
            inputEl: '#autocomplete-dropdown',
            openIn: 'dropdown',
            source: function (query, render) {
              ...
            }
          });
    h2 Autocomplete Parameters
    p Let's look on list of all available parameters:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td openIn
          td string
          td <code>page</code>
          td Defines how to open Autocomplete, can be <code>page</code> or <code>popup</code> (for Standalone) or <code>dropdown</code>
        tr
          td source
          td function (query, render)
          td
          td Function which accepts search <code>query</code> and <code>render</code> function where you need to pass array with matched items
        tr
          td limit
          td number
          td
          td Limit number of maximum displayed items in autocomplete per query
        tr
          td preloader
          td boolean
          td false
          td Set to <code>true</code> to include Preloader to autocomplete layout
        tr
          td preloaderColor
          td string
          td
          td Preloader color, one of the <a href="color-themes.html">default colors</a>
        tr
          td value
          td array
          td
          td Array with default selected values
        tr
          td valueProperty
          td string
          td id
          td Name of matched item object's key that represents item value
        tr
          td textProperty
          td string
          td text
          td Name of matched item object's key that represents item display value which is used as title of displayed options
        tr
          th(colspan="4") Standalone Autocomplete Parameters
        tr
          td requestSourceOnOpen
          td boolean
          td false
          td If enabled, then it will request passed to <code>source</code> function on autocomplete open
        tr
          td openerEl
          td string<br>HTMLElement
          td
          td String with CSS selector or HTMLElement of link which will open standalone autocomplete page or popup on click
        tr
          td popupCloseLinkText
          td string
          td Close
          td Default text for "Close" button when opened as Popup
        tr
          td pageBackLinkText
          td string
          td Back
          td Default text for "Back" link when opened as Page
        tr
          td pageTitle
          td string
          td
          td Autocomplete page title. If nothing is specified and passed <code>openerEl</code> is an item of List View, then text value of <code>item-title</code> element will be used
        tr
          td searchbarPlaceholder
          td string
          td Search...
          td Searchbar placeholder text
        tr
          td searchbarDisableText
          td string
          td Cancel
          td Searchbar "Cancel" button text
        tr
          td notFoundText
          td string
          td Nothing found
          td Text which is displayed when no matches found
        tr
          td multiple
          td boolean
          td false
          td Set to <code>true</code> to allow multiple selections
        tr
          td closeOnSelect
          td boolean
          td false
          td Set to <code>true</code> and autocomplete will be closed when user picks value. Not available if <code>multiple</code> is enabled
        tr
          td autoFocus
          td boolean
          td false
          td Set to <code>true</code> to auto focus search field on autocomplete open
        tr
          td animate
          td boolean
          td true
          td Set to <code>false</code> to open standalone autocomplete without animation
        tr
          td navbarColorTheme
          td string
          td
          td Navbar color theme. One of the default <a href="color-themes.html">color themes</a>
        tr
          td formColorTheme
          td string
          td
          td Form (checkboxes or radios) color theme. One of the default <a href="color-themes.html">color themes</a>
        tr
          td routableModals
          td boolean
          td true
          td Will add opened autocomplete modal (when <code>openIn: 'popup'</code>) to router history which gives ability to close autocomplete by going back in router history and set current route to the autocomplete modal
        tr
          td url
          td string
          td select/
          td Standalone autocomplete URL that will be set as a current route
        tr
          td view
          td object
          td
          td Link to initialized View instance if you want use standalone Autcomplete. By default, if not specified, it will be opened in Main View.
        tr
          th(colspan="4") Dropdown Autocomplete Parameters
        tr
          td inputEl
          td string<br>HTMLElement
          td
          td String with CSS selector or HTMLElement of related text input
        tr
          td inputEvents
          td string
          td input
          td Allows to configure input events used to handle Autcomplete actions and source request. Can be changed for example to <code>change keyup compositionend</code> if you use keyboard with composition of Chinese characters
        tr
          td highlightMatches
          td boolean
          td true
          td Highlight matches in autcomplete results
        tr
          td typeahead
          td boolean
          td false
          td Enables type ahead, will prefill input value with first item in match
        tr
          td dropdownPlaceholderText
          td string
          td
          td Specify dropdown placeholder text
        tr
          td updateInputValueOnSelect
          td boolean
          td true
          td If <code>true</code> then value of related input will be update as well
        tr
          td expandInput
          td boolean
          td false
          td If <code>true</code> then input which is used as <b>item-input</b> in List View will be expanded to full screen wide during dropdown visible.
        tr
          td dropdownContainerEl
          td string<br>HTMLElement
          td
          td By default dropdown will be added to parent page-content element. You can specify here different element where to add dropdown element
        tr
          th(colspan="4") Render functions
        tr
          td renderDropdown
          td function(items)
          td
          td Function to render autocomplete dropdown, must return dropdown HTML string
        tr
          td renderPage
          td function(items)
          td
          td Function to render autocomplete page, must return page HTML string
        tr
          td renderPopup
          td function(items)
          td
          td Function to render autocomplete popup, must return popup HTML string
        tr
          td renderItem
          td function(item, index)
          td
          td Function to render single autocomplete, must return item HTML string
        tr
          td renderSearchbar
          td function
          td
          td Function to render searchbar, must return searchbar HTML string
        tr
          td renderNavbar
          td function
          td
          td Function to render navbar, must return navbar HTML string
        tr
          th(colspan="4") Events
        tr
          td on
          td object
          td
          td Object with events handlers. For example:
            :code(lang="js")
                  var autocomplete = app.autocomplete.create({
                    ...
                    on: {
                      opened: function () {
                        console.log('Autocomplete opened')
                      }
                    }
                  })
    .important-note
      p Note that all following parameters can be used in global app parameters under <code>autocomplete</code> property to set defaults for all autcompletes. For example:
      :code(lang="js")
            var app = new Framework7({
              autocomplete: {
                openIn: 'popup',
                animate: false,
              }
            });
    h2 Autocomplete Methods & Properties
    p After we initialize Autocomplete we have its initialized instance in variable (like <code>autocomplete</code> variable in example above) with helpful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td autocomplete.params
          td Object with passed initialization parameters
        tr
          td autocomplete.value
          td Array with selected items
        tr
          td autocomplete.opened
          td <b>true</b> if Autocomplete is currently opened
        tr
          td autocomplete.openerEl
          td HTML element of Autcomplete opener element (if passed on init)
        tr
          td autocomplete.$openerEl
          td Dom7 instance of of Autcomplete opener element (if passed on init)
        tr
          td autocomplete.inputEl
          td HTML element of Autcomplete input (if passed on init)
        tr
          td autocomplete.$inputEl
          td Dom7 instance of of Autcomplete input (if passed on init)
        tr
          td autocomplete.$dropdownEl
          td Dom7 instance of Autcomplete dropdown
        tr
          td autocomplete.url
          td Autcomplete URL (that was passed in <code>url</code> parameter)
        tr
          td autocomplete.view
          td Autcomplete View (that was passed in <code>view</code> parameter) or found parent view
        tr
          td autocomplete.el
          td HTML element of Autcomplete container: dropdown element, or popup element, or page element. Available when Autocomplete opened
        tr
          td autocomplete.$el
          td Dom7 instance of Autcomplete container: dropdown element, or popup element, or page element. Available when Autocomplete opened
        tr
          td autocomplete.searchbar
          td Autcomplete page Searchbar instance
        tr
          th(colspan="2") Methods
        tr
          td autocomplete.open()
          td Open Autocomplete (Dropdown, Page or Popup)
        tr
          td autocomplete.close()
          td Close Autcomplete
        tr
          td autocomplete.preloaderShow()
          td Show autocomplete preloader
        tr
          td autocomplete.preloaderHide()
          td Hide autocomplete preloader
        tr
          td autocomplete.destroy()
          td Destroy Autocomplete instance and remove all events
        tr
          td autocomplete.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td autocomplete.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td autocomplete.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td autocomplete.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td autocomplete.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
    h2 Autocomplete Events
    p Autocomplete instance emits events on both self instance and app instance. App instance events has same names prefixed with <code>autocomplete</code>.
    table.events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td change
          td autocomplete
          td(rowspan="2") <span>autocomplete, value</span>
          td(rowspan="2") Event will be triggered when Autocomplete value changed. Returned <code>value</code> is an array with selected items
        tr
          td autocompleteChange
          td app
        tr
          td open
          td autocomplete
          td(rowspan="2") <span>autocomplete</span>
          td(rowspan="2") Event will be triggered when Autocomplete starts its opening animation. As an argument event handler receives autocomplete instance
        tr
          td autocompleteOpen
          td app
        tr
          td opened
          td autocomplete
          td(rowspan="2") <span>autocomplete</span>
          td(rowspan="2") Event will be triggered after Autocomplete completes its opening animation. As an argument event handler receives autocomplete instance
        tr
          td autocompleteOpened
          td app
        tr
          td close
          td autocomplete
          td(rowspan="2") <span>autocomplete</span>
          td(rowspan="2") Event will be triggered when Autocomplete starts its closing animation. As an argument event handler receives autocomplete instance
        tr
          td autocompleteClose
          td app
        tr
          td closed
          td autocomplete
          td(rowspan="2") <span>autocomplete</span>
          td(rowspan="2") Event will be triggered after Autocomplete completes its closing animation. As an argument event handler receives autocomplete instance
        tr
          td autocompleteClosed
          td app
        tr
          td beforeDestroy
          td autocomplete
          td(rowspan="2") <span>autocomplete</span>
          td(rowspan="2") Event will be triggered right before Autocomplete instance will be destroyed. As an argument event handler receives autocomplete instance
        tr
          td autocompleteBeforeDestroy
          td app
    .with-device
      h2(data-device-preview="../docs-demos/core/autocomplete.html") Examples
      :code(lang="js")
            var app = new Framework7();

            var $$ = Dom7;

            // Fruits data demo array
            var fruits = ('Apple Apricot Avocado Banana Melon Orange Peach Pear Pineapple').split(' ');
      h4 Simple Dropdown Autocomplete
      :code(lang="html")
            <div class="list no-hairlines-md">
              <div class="block-header">Simple Dropdown Autocomplete</div>
              <ul>
                <li class="item-content item-input inline-label">
                  <div class="item-inner">
                    <div class="item-title item-label">Fruit</div>
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown" type="text" placeholder="Fruit">
                    </div>
                  </div>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteDropdownSimple = app.autocomplete.create({
              inputEl: '#autocomplete-dropdown',
              openIn: 'dropdown',
              source: function (query, render) {
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              }
            });

      h4 Dropdown With Input Expand
      :code(lang="html")
            <div class="list no-hairlines-md">
              <div class="block-header">Dropdown With Input Expand</div>
              <ul>
                <li class="item-content item-input inline-label">
                  <div class="item-inner">
                    <div class="item-title item-label">Fruit</div>
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-expand" type="text" placeholder="Fruit">
                    </div>
                  </div>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteDropdownExpand = app.autocomplete.create({
              inputEl: '#autocomplete-dropdown-expand',
              openIn: 'dropdown',
              expandInput: true, // expand input
              source: function (query, render) {
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              }
            });

      h4 Dropdown With All Values
      :code(lang="html")
            <div class="list no-hairlines-md">
              <div class="block-header">Dropdown With All Values</div>
              <ul>
                <li class="item-content item-input">
                  <div class="item-inner">
                    <div class="item-title item-label">Fruit</div>
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-all" type="text" placeholder="Fruit">
                    </div>
                  </div>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteDropdownAll = app.autocomplete.create({
              inputEl: '#autocomplete-dropdown-all',
              openIn: 'dropdown',
              source: function (query, render) {
                var results = [];
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              }
            });
      h4 Dropdown With Placeholder
      :code(lang="html")
            <div class="list no-hairlines-md">
              <div class="block-header">Dropdown With Placeholder</div>
              <ul>
                <li class="item-content item-input">
                  <div class="item-inner">
                    <div class="item-title item-label">Fruit</div>
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-placeholder" type="text" placeholder="Fruit">
                    </div>
                  </div>
                </li>
              </ul>
            </div>

      :code(lang="js")
            var autocompleteDropdownPlaceholder = app.autocomplete.create({
              inputEl: '#autocomplete-dropdown-placeholder',
              openIn: 'dropdown',
              dropdownPlaceholderText: 'Try to type "Apple"',
              source: function (query, render) {
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              }
            });

      h4 Dropdown With Typeahead
      :code(lang="html")
            <div class="list no-hairlines-md">
              <div class="block-header">Dropdown With Typeahead</div>
              <ul>
                <li class="item-content item-input">
                  <div class="item-inner">
                    <div class="item-title item-label">Fruit</div>
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-typeahead" type="text" placeholder="Fruit">
                    </div>
                  </div>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteDropdownTypeahead = app.autocomplete.create({
              inputEl: '#autocomplete-dropdown-typeahead',
              openIn: 'dropdown',
              dropdownPlaceholderText: 'Try to type "Pineapple"',
              typeahead: true,
              source: function (query, render) {
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) === 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              }
            });

      h4 Dropdown With Ajax-Data
      :code(lang="html")
            <div class="list no-hairlines-md">
              <div class="block-header">Dropdown With Ajax-Data</div>
              <ul>
                <li class="item-content item-input">
                  <div class="item-inner">
                    <div class="item-title item-label">Language</div>
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-ajax" type="text" placeholder="Language">
                    </div>
                  </div>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteDropdownAjax = app.autocomplete.create({
              inputEl: '#autocomplete-dropdown-ajax',
              openIn: 'dropdown',
              preloader: true, //enable preloader
              /* If we set valueProperty to "id" then input value on select will be set according to this property */
              valueProperty: 'name', //object's "value" property name
              textProperty: 'name', //object's "text" property name
              limit: 20, //limit to 20 results
              dropdownPlaceholderText: 'Try "JavaScript"',
              source: function (query, render) {
                var autocomplete = this;
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Show Preloader
                autocomplete.preloaderShow();

                // Do Ajax request to Autocomplete data
                app.request({
                  url: 'autocomplete-languages.json',
                  method: 'GET',
                  dataType: 'json',
                  //send "query" to server. Useful in case you generate response dynamically
                  data: {
                    query: query,
                  },
                  success: function (data) {
                    // Find matched items
                    for (var i = 0; i < data.length; i++) {
                      if (data[i].name.toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(data[i]);
                    }
                    // Hide Preoloader
                    autocomplete.preloaderHide();
                    // Render items by passing array with result items
                    render(results);
                  }
                });
              }
            });

      h4 Dropdown With Ajax-Data + Typeahead
      :code(lang="html")
            <div class="list no-hairlines-md">
              <div class="block-header">Dropdown With Ajax-Data + Typeahead</div>
              <ul>
                <li class="item-content item-input">
                  <div class="item-inner">
                    <div class="item-title item-label">Language</div>
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-ajax-typeahead" type="text" placeholder="Language">
                    </div>
                  </div>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteDropdownAjaxTypeahead = app.autocomplete.create({
              inputEl: '#autocomplete-dropdown-ajax-typeahead',
              openIn: 'dropdown',
              preloader: true, //enable preloader
              /* If we set valueProperty to "id" then input value on select will be set according to this property */
              valueProperty: 'name', //object's "value" property name
              textProperty: 'name', //object's "text" property name
              limit: 20, //limit to 20 results
              typeahead: true,
              dropdownPlaceholderText: 'Try "JavaScript"',
              source: function (query, render) {
                var autocomplete = this;
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Show Preloader
                autocomplete.preloaderShow();

                // Do Ajax request to Autocomplete data
                app.request({
                  url: 'autocomplete-languages.json',
                  method: 'GET',
                  dataType: 'json',
                  //send "query" to server. Useful in case you generate response dynamically
                  data: {
                    query: query,
                  },
                  success: function (data) {
                    // Find matched items
                    for (var i = 0; i < data.length; i++) {
                      if (data[i].name.toLowerCase().indexOf(query.toLowerCase()) === 0) results.push(data[i]);
                    }
                    // Hide Preoloader
                    autocomplete.preloaderHide();
                    // Render items by passing array with result items
                    render(results);
                  }
                });
              }
            });
      h4 Searchbar Dropdown
      :code(lang="html")
            <div class="page">
              <div class="navbar">
                <div class="navbar-inner sliding">
                  ...
                  <!-- Put searchbar in subnavbar -->
                  <div class="subnavbar">
                    <form class="searchbar" id="searchbar-autocomplete">
                      <div class="searchbar-inner">
                        <div class="searchbar-input-wrap">
                          <input type="search" placeholder="Search">
                          <i class="searchbar-icon"></i>
                          <span class="input-clear-button"></span>
                        </div>
                        <span class="searchbar-disable-button">Cancel</span>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
              ...
            </div>
      :code(lang="js")
            var searchbar = app.searchbar.create({
              el: '#searchbar-autocomplete',
              customSearch: true,
              on: {
                search: function (query) {
                  console.log(query);
                }
              }
            });
            var autocompleteSearchbar = app.autocomplete.create({
              openIn: 'dropdown',
              inputEl: '#searchbar-autocomplete input[type="search"]',
              dropdownPlaceholderText: 'Type "Apple"',
              source: function (query, render) {
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              }
            })
      h4 Simple Standalone Autocomplete
      :code(lang="html")
            div class="list">
              <div class="block-header">Simple Standalone Autocomplete</div>
              <ul>
                <li>
                  <a class="item-link item-content" href="#" id="autocomplete-standalone">
                    <input type="hidden">
                    <div class="item-inner">
                      <div class="item-title">Favorite Fruite</div>
                      <div class="item-after"></div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteStandaloneSimple = app.autocomplete.create({
              openIn: 'page', //open in page
              openerEl: '#autocomplete-standalone', //link that opens autocomplete
              closeOnSelect: true, //go back after we select something
              source: function (query, render) {
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              },
              on: {
                change: function (value) {
                  console.log(value);
                  // Add item text value to item-after
                  $$('#autocomplete-standalone').find('.item-after').text(value[0]);
                  // Add item value to input value
                  $$('#autocomplete-standalone').find('input').val(value[0]);
                },
              },
            });

      h4 Popup Autocomplete
      :code(lang="html")
            <div class="list">
              <div class="block-header">Popup Autocomplete</div>
              <ul>
                <li>
                  <a class="item-link item-content" href="#" id="autocomplete-standalone-popup">
                    <input type="hidden">
                    <div class="item-inner">
                      <div class="item-title">Favorite Fruite</div>
                      <div class="item-after"></div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteStandalonePopup = app.autocomplete.create({
              openIn: 'popup', //open in page
              openerEl: '#autocomplete-standalone-popup', //link that opens autocomplete
              closeOnSelect: true, //go back after we select something
              source: function (query, render) {
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              },
              on: {
                change: function (value) {
                  // Add item text value to item-after
                  $$('#autocomplete-standalone-popup').find('.item-after').text(value[0]);
                  // Add item value to input value
                  $$('#autocomplete-standalone-popup').find('input').val(value[0]);
                },
              },
            });

      h4 Multiple Values
      :code(lang="html")
            <div class="list">
              <div class="block-header">Multiple Values</div>
              <ul>
                <li>
                  <a class="item-link item-content" href="#" id="autocomplete-standalone-multiple">
                    <input type="hidden">
                    <div class="item-inner">
                      <div class="item-title">Favorite Fruite</div>
                      <div class="item-after"></div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteStandaloneMultiple = app.autocomplete.create({
              openIn: 'page', //open in page
              openerEl: '#autocomplete-standalone-multiple', //link that opens autocomplete
              multiple: true, //allow multiple values
              source: function (query, render) {
                var autocomplete = this;
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Find matched items
                for (var i = 0; i < fruits.length; i++) {
                  if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(fruits[i]);
                }
                // Render items by passing array with result items
                render(results);
              },
              on: {
                change: function (value) {
                  // Add item text value to item-after
                  $$('#autocomplete-standalone-multiple').find('.item-after').text(value.join(', '));
                  // Add item value to input value
                  $$('#autocomplete-standalone-multiple').find('input').val(value.join(', '));
                }
              }
            });

      h4 Standalone With Ajax-Data
      :code(lang="html")
            <div class="list">
              <div class="block-header">With Ajax-Data</div>
              <ul>
                <li>
                  <a class="item-link item-content" href="#" id="autocomplete-standalone-ajax">
                    <input type="hidden">
                    <div class="item-inner">
                      <div class="item-title">Language</div>
                      <div class="item-after"></div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
      :code(lang="js")
            var autocompleteStandaloneAjax = app.autocomplete.create({
              openIn: 'page', //open in page
              openerEl: '#autocomplete-standalone-ajax', //link that opens autocomplete
              multiple: true, //allow multiple values
              valueProperty: 'id', //object's "value" property name
              textProperty: 'name', //object's "text" property name
              limit: 50,
              preloader: true, //enable preloader
              source: function (query, render) {
                var autocomplete = this;
                var results = [];
                if (query.length === 0) {
                  render(results);
                  return;
                }
                // Show Preloader
                autocomplete.preloaderShow();
                // Do Ajax request to Autocomplete data
                app.request({
                  url: 'autocomplete-languages.json',
                  method: 'GET',
                  dataType: 'json',
                  //send "query" to server. Useful in case you generate response dynamically
                  data: {
                    query: query
                  },
                  success: function (data) {
                    // Find matched items
                    for (var i = 0; i < data.length; i++) {
                      if (data[i].name.toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(data[i]);
                    }
                    // Hide Preoloader
                    autocomplete.preloaderHide();
                    // Render items by passing array with result items
                    render(results);
                  }
                });
              },
              on: {
                change: function (value) {
                  var itemText = [],
                      inputValue = [];
                  for (var i = 0; i < value.length; i++) {
                    itemText.push(value[i].name);
                    inputValue.push(value[i].id);
                  }
                  // Add item text value to item-after
                  $$('#autocomplete-standalone-ajax').find('.item-after').text(itemText.join(', '));
                  // Add item value to input value
                  $$('#autocomplete-standalone-ajax').find('input').val(inputValue.join(', '));
                },
              },
            });


