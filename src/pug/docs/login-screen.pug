extends ../_docs-template

block vars
  - var title = 'Login Screen | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Login Screen
    ul.docs-index
    p Framework7 comes with ready to use Login Screen layout. It could be used inside of page or login screen (embedded) or as a standalone modal.
    h2 Login Screen Layout
    p First of all, let's look at the standalone Login Screen layout. It behaves almost in the same way as Login Screen:
    :code(lang="html")
          <div class="login-screen">
            <!-- Default view-page layout -->
            <div class="view">
              <div class="page">
                <!-- page-content has additional login-screen content -->
                <div class="page-content login-screen-content">
                  <div class="login-screen-title">My App</div>
                  <!-- Login form -->
                  <form>
                    <div class="list">
                      <ul>
                        <li class="item-content item-input">
                          <div class="item-inner">
                            <div class="item-title item-label">Username</div>
                            <div class="item-input-wrap">
                              <input type="text" name="username" placeholder="Username">
                              <span class="input-clear-button"></span>
                            </div>
                          </div>
                        </li>
                        <li class="item-content item-input">
                          <div class="item-inner">
                            <div class="item-title item-label">Password</div>
                            <div class="item-input-wrap">
                              <input type="password" name="password" placeholder="Password">
                              <span class="input-clear-button"></span>
                            </div>
                          </div>
                        </li>
                      </ul>
                    </div>
                    <div class="list">
                      <ul>
                        <li>
                          <a href="#" class="item-link list-button">Sign In</a>
                        </li>
                      </ul>
                      <div class="block-footer">Some text with login information.</div>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
    .important-note
      p Note that all elements you see inside of &lt;div class="login-screen"&gt; are optional, but you can use them as boilerplate layout for your Login form
    h2 Login Screen App Methods
    p Let's look at related App methods to work with Login Screen:
    .method-wrap
      p
        span.method app.loginScreen.create(<span>parameters</span>)
        | - create Login Screen instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with login screen parameters
      p.method-returns Method returns created Login Screen's instance

    .method-wrap
      p
        span.method app.loginScreen.destroy(<span>el</span>)
        | - destroy Login Screen instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Login Screen element or Login Screen instance to destroy.
    .method-wrap
      p
        span.method app.loginScreen.get(<span>el</span>)
        | - get Login Screen instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Login Screen element.
      p.method-returns Method returns Login Screen's instance
    .method-wrap
      p
        span.method app.loginScreen.open(<span>el</span>, <span>animate</span>)
        | - opens Login Screen
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Login Screen element to open.
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Open Login Screen with animation.
      p.method-returns Method returns Login Screen's instance
    .method-wrap
      p
        span.method app.loginScreen.close(<span>el</span>, <span>animate</span>)
        | - closes Login Screen
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Login Screen element to close.
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Close Login Screen with animation.
      p.method-returns Method returns Login Screen's instance

    h2 Login Screen Parameters
    p Now let's look at list of available parameters we need to create Login Screen:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement
          td
          td Login Screen element. Can be useful if you already have Login Screen element in your HTML and want to create new instance using this element
        tr
          td content
          td string
          td
          td Full Login Screen HTML layout string. Can be useful if you want to create Login Screen element dynamically
        tr
          td animate
          td boolean
          td true
          td Whether the Login Screen should be opened/closed with animation or not. Can be overwritten in <code>.open()</code> and <code>.close()</code> methods
        tr
          td on
          td object
          td
          td Object with events handlers. For example:
            :code(lang="js")
                  var login screen = app.loginScreen.create({
                    content: '<div class="login-screen">...</div>',
                    on: {
                      opened: function () {
                        console.log('Login Screen opened')
                      }
                    }
                  })
    h2 Login Screen Methods & Properties
    p So to create Login Screen we have to call:
    :code(lang="js")
          var loginScreen = app.loginScreen.create({ /* parameters */ })
    p After that we have its initialized instance (like <code>loginScreen</code> variable in example above) with useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td loginScreen.app
          td Link to global app instance
        tr
          td loginScreen.el
          td Login Screen HTML element
        tr
          td loginScreen.$el
          td Dom7 instance with login screen HTML element
        tr
          td loginScreen.params
          td Login Screen parameters
        tr
          td loginScreen.opened
          td Boolean prop indicating whether login screen is opened or not
        tr
          th(colspan="2") Methods
        tr
          td loginScreen.open(<span>animate</span>)
          td Open login screen. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default <code>true</code>) - defines whether it should be opened with animation
        tr
          td loginScreen.close(<span>animate</span>)
          td Close login screen. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default <code>true</code>) - defines whether it should be closed with animation
        tr
          td loginScreen.destroy()
          td Destroy login screen
        tr
          td loginScreen.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td loginScreen.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td loginScreen.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td loginScreen.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td loginScreen.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
    h2 Control Login Screen With Links
    p It is possible to open and close required login screen (if you have them in DOM) using special classes and data attributes on links:
    .important-note
      ul
        li
          p To open login screen we need to add "<b>login-screen-open</b>" class to any HTML element (prefered to link)
        li
          p To close login screen we need to add "<b>login-screen-close</b>" class to any HTML element (prefered to link)
        li
          p If you have more than one login screen in DOM, you need to specify appropriate login screen via additional <b>data-login-screen=".my-login-screen"</b> attribute on this HTML element
    p According to above note:
    :code(lang="html")
          <!-- In data-login-screen attribute we specify CSS selector of login screen we need to open -->
          <p><a href="#" data-login-screen=".my-login-screen" class="login-screen-open">Open Login Screen</a></p>

          <!-- And somewhere in DOM -->
          <div class="login-screen my-login-screen">
            <div class="view">
              <div class="page">
                <div class="navbar">
                  <div class="navbar-inner">
                    <div class="title">Login Screen</div>
                    <div class="right">
                      <!-- Link to close login screen -->
                      <a class="link login-screen-close">Close</a>
                    </div>
                  </div>
                </div>
              </div>
              <div class="page-content">
                ...
              </div>
            </div>
            ...
          </div>


    h2 Login Screen Events
    p Login Screen will fire the following DOM events on login screen element and events on app and login screen instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td loginscreen:open
          td Login Screen Element<span>&lt;div class="login-screen"&gt;</span>
          td Event will be triggered when Login Screen starts its opening animation
        tr
          td loginscreen:opened
          td Login Screen Element<span>&lt;div class="login-screen"&gt;</span>
          td Event will be triggered after Login Screen completes its opening animation
        tr
          td loginscreen:close
          td Login Screen Element<span>&lt;div class="login-screen"&gt;</span>
          td Event will be triggered when Login Screen starts its closing animation
        tr
          td loginscreen:closed
          td Login Screen Element<span>&lt;div class="login-screen"&gt;</span>
          td Event will be triggered after Login Screen completes its closing animation
    h3 App and Login Screen Instance Events
    p Login Screen instance emits events on both self instance and app instance. App instance events has same names prefixed with <code>loginScreen</code>.
    table.events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td open
          td <span>loginScreen</span>
          td loginScreen
          td(rowspan="2") Event will be triggered when Login Screen starts its opening animation. As an argument event handler receives login screen instance
        tr
          td loginScreenOpen
          td <span>loginScreen</span>
          td app
        tr
          td opened
          td <span>loginScreen</span>
          td loginScreen
          td(rowspan="2") Event will be triggered after Login Screen completes its opening animation. As an argument event handler receives login screen instance
        tr
          td loginScreenOpened
          td <span>loginScreen</span>
          td app
        tr
          td close
          td <span>loginScreen</span>
          td loginScreen
          td(rowspan="2") Event will be triggered when Login Screen starts its closing animation. As an argument event handler receives login screen instance
        tr
          td loginScreenClose
          td <span>loginScreen</span>
          td app
        tr
          td closed
          td <span>loginScreen</span>
          td loginScreen
          td(rowspan="2") Event will be triggered after Login Screen completes its closing animation. As an argument event handler receives login screen instance
        tr
          td loginScreenClosed
          td <span>loginScreen</span>
          td app
        tr
          td beforeDestroy
          td <span>loginScreen</span>
          td loginScreen
          td(rowspan="2") Event will be triggered right before Login Screen instance will be destroyed. As an argument event handler receives login screen instance
        tr
          td loginScreenBeforeDestroy
          td <span>loginScreen</span>
          td app
    h2 Embedded Login Screen
    p It is also possible to embed Login Screen into the page or popup. Let's look on the example of Login Screen inside of page:
    :code(lang="html")
          <div class="page no-navbar no-toolbar no-swipeback">
            <div class="page-content login-screen-content">
              <div class="login-screen-title">My App</div>
              <form>
                <div class="list">
                  <ul>
                    <li class="item-content item-input">
                      <div class="item-inner">
                        <div class="item-title item-label">Username</div>
                        <div class="item-input">
                          <input type="text" name="username" placeholder="Your username">
                        </div>
                      </div>
                    </li>
                    <li class="item-content item-input">
                      <div class="item-inner">
                        <div class="item-title item-label">Password</div>
                        <div class="item-input">
                          <input type="password" name="password" placeholder="Your password">
                        </div>
                      </div>
                    </li>
                  </ul>
                </div>
                <div class="list">
                  <ul>
                    <li><a href="#" class="item-link list-button">Sign In</a></li>
                  </ul>
                  <div class="block-footer">
                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                    <p><a href="#" class="close-login-screen">Close Login Screen</a></p>
                  </div>
                </div>
              </form>
            </div>
          </div>
    .important-note
      p Note that on login screen page we have additional "no-navbar", "no-toolbar" and "no-swipeback" classes to hide navigation element from user
    .with-device
      h2(data-device-preview="../docs-demos/core/login-screen.html") Examples
      :code(lang="html")
            <body>
              ...
                <div class="page-content">
                  <div class="block">
                    <p>
                      <!-- Open in login screen-modal that is already in DOM-->
                      <a href="#" class="button login-screen-open" data-login-screen=".login-screen">Open As Modal</a>
                    </p>
                    <p>
                      <!-- Load page with login screen-->
                      <a href="/login-screen/" class="button">Open As Page</a>
                    </p>
                  </div>
                </div>
              ...
              <div class="login-screen">
                <div class="view">
                  <div class="page">
                    <div class="page-content login-screen-content">
                      <div class="login-screen-title">My App</div>
                      <form>
                        <div class="list">
                          <ul>
                            <li class="item-content item-input">
                              <div class="item-inner">
                                <div class="item-title item-label">Username</div>
                                <div class="item-input-wrap">
                                  <input type="text" name="username" placeholder="Your username">
                                </div>
                              </div>
                            </li>
                            <li class="item-content item-input">
                              <div class="item-inner">
                                <div class="item-title item-label">Password</div>
                                <div class="item-input-wrap">
                                  <input type="password" name="password" placeholder="Your password">
                                </div>
                              </div>
                            </li>
                          </ul>
                        </div>
                        <div class="list">
                          <ul>
                            <li><a class="item-link list-button" href="#">Sign In</a></li>
                          </ul>
                          <div class="block-footer">
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                            <p><a class="link login-screen-close" href="#">Close Login Screen</a></p>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
              ...
            </body>
      :code(lang="js")
            var $$ = Dom7;

            var app = new Framework7({
              routes: [{
                path: '/login-screen/',
                /*
                We can load it from url like:
                url: 'login-screen.html'
                But in this example we load it just from content string
                */
                content: '\
                  <div class="page no-navbar no-toolbar no-swipeback">\
                    <div class="page-content login-screen-content">\
                      <div class="login-screen-title">My App</div>\
                      <form>\
                        <div class="list">\
                          ...
                        </div>\
                        <div class="list">\
                          <ul>\
                            <li><a href="#" class="item-link list-button">Sign In</a></li>\
                          </ul>\
                          <div class="block-footer">\
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\
                            <p><a href="#" class="link back">Close Login Screen</a></p>\
                          </div>\
                        </div>\
                      </form>\
                    </div>\
                  </div>'
                }]
            });

            // Login Screen-Modal DOM events
            $$('.login-screen').on('loginscreen:open', function (e, loginScreen) {
              console.log('Login screen open')
            });
            $$('.login-screen').on('loginscreen:opened', function (e, loginScreen) {
              console.log('Login screen opened')
            });
            $$('.login-screen').on('loginscreen:close', function (e, loginScreen) {
              console.log('Login screen close')
            });
            $$('.login-screen').on('loginscreen:closed', function (e, loginScreen) {
              console.log('Login screen closed')
            });
