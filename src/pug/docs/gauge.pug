extends ../_docs-template

block vars
  - var title = 'Gauge | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Gauge
    ul.docs-index
    p Framework7 comes with Gauge component. It produces nice looking fully responsive SVG gauges.
    h2 Gauge Layout
    p Because Gauge SVG is generated by JavaScript its HTML layout is as simple as possible:
    :code(lang="html")
          <!-- Gauge element -->
          <div class="gauge"></div>
    h2 Gauge App Methods
    p Now we need to create/initialize the Gauge. Let's look at related App methods to work with Gauge:
    .method-wrap
      p
        span.method app.gauge.create(<span>parameters</span>)
        | - create Gauge instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with gauge parameters
      p.method-returns Method returns created Gauge's instance

    .method-wrap
      p
        span.method app.gauge.destroy(<span>el</span>)
        | - destroy Gauge instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Gauge element or Gauge instance to destroy.
    .method-wrap
      p
        span.method app.gauge.get(<span>el</span>)
        | - get Gauge instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Gauge element.
      p.method-returns Method returns Gauge's instance
    .method-wrap
      p
        span.method app.gauge.update(<span>parameters</span>)
        | - update/rerender Gauge SVG according to passed parameters
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with gauge parameters
      p.method-returns Method returns gauge value
    h2 Gauge Parameters
    p Now let's look at list of available parameters we need to create Gauge:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement<br>string
          td
          td Gauge element. HTMLElement or string with CSS selector of gauge element. Generated SVG will be inserted into this element
        tr
          td type
          td string
          td circle
          td Gauge type. Can be <code>circle</code> or <code>semicircle</code>
        tr
          td value
          td number
          td 0
          td Gauge value/percentage. Must be a number between <code>0</code> and <code>1</code>
        tr
          td size
          td number
          td 200
          td Generated SVG image size (in px)
        tr
          td bgColor
          td string
          td transparent
          td Gauge background color. Can be any valid color string, e.g. <code>#ff00ff</code>, <code>rgb(0,0,255)</code>, etc.
        tr
          td borderBgColor
          td string
          td #eeeeee
          td Main border/stroke background color
        tr
          td borderColor
          td string
          td #000000
          td Main border/stroke color
        tr
          td borderWidth
          td string
          td 10
          td Main border/stroke width
        tr
          td valueText
          td string
          td null
          td Gauge value text (large text in the center of gauge)
        tr
          td valueTextColor
          td string
          td #000000
          td Value text color
        tr
          td valueFontSize
          td string
          td 31
          td Value text font size
        tr
          td valueFontWeight
          td string
          td 500
          td Value text font weight
        tr
          td labelText
          td string
          td null
          td Gauge additional label text
        tr
          td labelTextColor
          td string
          td #888888
          td Label text color
        tr
          td labelFontSize
          td string
          td 14
          td Label text font size
        tr
          td labelFontWeight
          td string
          td 400
          td Label text font weight
        tr
          td on
          td object
          td
          td Object with events handlers. For example:
            :code(lang="js")
                  var gauge = app.gauge.create({
                    el: '.gauge',
                    value: 33,
                    valueText: '33%',
                    on: {
                      beforeDestroy: function () {
                        console.log('Gauge will be destroyed')
                      }
                    }
                  })

    h2 Gauge Methods & Properties
    p So to create Gauge we have to call:
    :code(lang="js")
          var gauge = app.gauge.create({ /* parameters */ })
    p After that we have its initialized instance (like <code>gauge</code> variable in example above) with useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td gauge.app
          td Link to global app instance
        tr
          td gauge.el
          td Gauge HTML element
        tr
          td gauge.$el
          td Dom7 instance with gauge HTML element
        tr
          td gauge.gaugeSvgEl
          td Gauge generated SVH HTML element
        tr
          td gauge.$gaugeSvgEl
          td Dom7 instance with generated SVH HTML element
        tr
          td gauge.params
          td Gauge parameters
        tr
          th(colspan="2") Methods
        tr
          td gauge.update(<span>parameters</span>)
          td Update/rerender gauge SVG element according to passed parameters. It accepts object with same parameters required for gauge initialization. You can pass only parameters that needs to be updated, e.g.
            :code(lang="js")
                  var gauge = app.gauge.create({
                    value: 0.5,
                    // ...
                  });

                  // and when we need to update rendered SVG based on new value:
                  gauge.update({
                    value: 0.6,
                  });
        tr
          td gauge.destroy()
          td Destroys gauge instance
        tr
          td gauge.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td gauge.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td gauge.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td gauge.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td gauge.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance

    h2 Gauge Events
    p Gauge will fire the following DOM events on gauge element and events on app and gauge instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td gauge:beforedestroy
          td Gauge Element<span>&lt;div class="gauge"&gt;</span>
          td Event will be triggered right before Gauge instance will be destroyed
    h3 App and Gauge Instance Events
    p Gauge instance emits events on both self instance and app instance. App instance events has same names prefixed with <code>gauge</code>.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td beforeDestroy
          td <span>(gauge)</span>
          td gauge
          td(rowspan="2") Event will be triggered right before Gauge instance will be destroyed. As an argument event handler receives Gauge instance
        tr
          td gaugeBeforeDestroy
          td <span>(gauge)</span>
          td app
    h2 Gauge Auto Initialization
    p If you don't need to use Gauge API and your Gauge is inside of the page and presented in DOM on moment of page initialization then it can be auto initialized with just adding additional <code>gauge-init</code> class, and specifying all parameters with <code>data-</code> attributes:
    :code(lang="html")
          <!-- Add gauge-init class, and specify parameters in data- attributes -->
          <div
            class="gauge gauge-init my-gauge"
            data-type="circle"
            data-value="0.44"
            data-value-text="44%"
            data-value-text-color="#ff9800"
            data-border-color="#ff9800"
          ></div>
    p In this case if you need to access automatically created Gauge instance you can use the <code>app.gauge.get</code> app method:
    :code(lang="js")
          var gauge = app.gauge.get('.my-gauge');

          gauge.update({
            value: 0.9,
          });

    .with-device
      h2(data-device-preview="../docs-demos/core/gauge.html") Examples
      :code(lang="html")
            <div class="block block-strong text-align-center">
              <!-- we will init this gauge in JavaScript -->
              <div class="gauge demo-gauge"></div>
              <!-- buttons to change gauge value -->
              <p class="segmented segmented-raised">
                <a href="#" class="button" data-value="0">0%</a>
                <a href="#" class="button" data-value="25">25%</a>
                <a href="#" class="button" data-value="50">50%</a>
                <a href="#" class="button" data-value="75">75%</a>
                <a href="#" class="button" data-value="100">100%</a>
              </p>
            </div>
      :code(lang="js")
            // Init top demo gauge
            var demoGauge = app.gauge.create({
              el: '.demo-gauge',
              type: 'circle',
              value: 0.5,
              size: 250,
              borderColor: '#2196f3',
              borderWidth: 10,
              valueText: '50%',
              valueFontSize: 41,
              valueTextColor: '#2196f3',
              labelText: 'amount of something',
            });

            // Change demo gauge on button click
            $$('.button').on('click', function () {
              var value = $$(this).attr('data-value');
              demoGauge.update({
                value: value / 100,
                valueText: value + '%'
              });
            });
      :code(lang="html")
            <div class="block-title">Circle Gauges</div>
            <div class="block block-strong">
              <div class="row">
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="circle"
                    data-value="0.44"
                    data-value-text="44%"
                    data-value-text-color="#ff9800"
                    data-border-color="#ff9800"
                  ></div>
                </div>
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="circle"
                    data-value="0.12"
                    data-value-text="$120"
                    data-value-text-color="#4caf50"
                    data-border-color="#4caf50"
                    data-label-text="of $1000 budget"
                    data-label-text-color="#f44336"
                    data-label-font-weight="700"
                  ></div>
                </div>
              </div>
            </div>
      :code(lang="html")
            <div class="block-title">Semicircle Gauges</div>
            <div class="block block-strong">
              <div class="row">
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="semicircle"
                    data-value="0.3"
                    data-value-text="30%"
                    data-value-text-color="#f44336"
                    data-border-color="#f44336"
                  ></div>
                </div>
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="semicircle"
                    data-value="0.5"
                    data-value-text="30kg"
                    data-value-text-color="#e91e63"
                    data-border-color="#e91e63"
                    data-label-text="of 60kg total"
                    data-label-text-color="#333"
                  ></div>
                </div>
              </div>
            </div>
      :code(lang="html")
            <div class="block-title">Customization</div>
            <div class="block block-strong">
              <div class="row">
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="circle"
                    data-value="0.35"
                    data-value-text="35%"
                    data-value-text-color="#4caf50"
                    data-value-font-size="51"
                    data-value-font-weight="700"
                    data-border-width="20"
                    data-border-color="#4caf50"
                    data-border-bg-color="#ffeb3b"
                    data-bg-color="#ffeb3b"
                  ></div>
                </div>
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="circle"
                    data-value="0.67"
                    data-value-text="$670"
                    data-value-text-color="#000"
                    data-border-color="#ff9800"
                    data-label-text="of $1000 spent"
                    data-label-text-color="#4caf50"
                    data-label-font-weight="800"
                    data-label-font-size="12"
                    data-border-width="30"
                  ></div>
                </div>
              </div>
              <br>
              <div class="row">
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="semicircle"
                    data-value="0.5"
                    data-value-text="50%"
                    data-value-text-color="#ffeb3b"
                    data-value-font-size="41"
                    data-value-font-weight="700"
                    data-border-width="10"
                    data-border-color="#ffeb3b"
                    data-border-bg-color="transparent"
                  ></div>
                </div>
                <div class="col text-align-center">
                  <div
                    class="gauge gauge-init"
                    data-type="semicircle"
                    data-value="0.77"
                    data-border-color="#ff9800"
                    data-label-text="$770 spent so far"
                    data-label-text-color="#ff9800"
                    data-label-font-weight="800"
                    data-label-font-size="12"
                    data-border-width="10"
                  ></div>
                </div>
              </div>
            </div>


