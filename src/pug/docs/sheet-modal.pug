extends ../_docs-template

block vars
  - var title = 'Sheet Modal | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Sheet Modal
    ul.docs-index
    p Sheet Modal is a special overlay type which is similar to Picker/Calendar's overlay. Such modal allows to create custom overlays with custom content
    h2 Sheet Layout
    p Sheet layout is pretty simple:
    :code(lang="html")
          &lt;body&gt;
            ...
            &lt;!-- Sheet Modal Container --&gt;
            &lt;div class="sheet-modal"&gt;
              &lt;!-- Sheet Modal Toolbar, optional --&gt;
              &lt;div class="toolbar"&gt;
                &lt;div class="toolbar-inner"&gt;
                  &lt;div class="left"&gt;&lt;/div&gt;
                  &lt;div class="right"&gt;
                    &lt;a href="#" class="link sheet-close"&gt;Done&lt;/a&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;!-- Sheet Modal Inner --&gt;
              &lt;div class="sheet-modal-inner"&gt;
                &lt;!-- Sheet Modal content --&gt;
                &lt;div class="block"&gt;
                  &lt;p&gt;Integer mollis nulla id nibh elementum finibus...&lt;/p&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;

          &lt;/body&gt;
    h2 Sheet App Methods
    p Let's look at related App methods to work with Sheet:
    .method-wrap
      p
        span.method app.sheet.create(<span>parameters</span>)
        | - create Sheet instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with sheet parameters
      p.method-returns Method returns created Sheet's instance

    .method-wrap
      p
        span.method app.sheet.destroy(<span>el</span>)
        | - destroy Sheet instance
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Sheet element or Sheet instance to destroy.
    .method-wrap
      p
        span.method app.sheet.get(<span>el</span>)
        | - get Sheet instance by HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Sheet element.
      p.method-returns Method returns Sheet's instance
    .method-wrap
      p
        span.method app.sheet.open(<span>el</span>, <span>animate</span>)
        | - opens Sheet
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Sheet element to open.
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Open Sheet with animation.
      p.method-returns Method returns Sheet's instance
    .method-wrap
      p
        span.method app.sheet.close(<span>el</span>, <span>animate</span>)
        | - closes Sheet
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Sheet element to close.
        li
          span.parameter animate
          |  - <span class="parameter-type">boolean</span>. Close Sheet with animation.
      p.method-returns Method returns Sheet's instance

    h2 Sheet Parameters
    p Now let's look at list of available parameters we need to create Sheet:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement
          td
          td Sheet element. Can be useful if you already have Sheet element in your HTML and want to create new instance using this element
        tr
          td content
          td string
          td
          td Full Sheet HTML layout string. Can be useful if you want to create Sheet element dynamically
        tr
          td backdrop
          td boolean
          td
          td Enables Sheet backdrop (dark semi transparent layer behind). By default it is <code>true</code> for MD theme and <code>false</code> for iOS theme
        tr
          td scrollToEl
          td HTMLElement<br>string
          td
          td HTML element or string (with CSS selector) of element. If specified, then sheet will try to scroll page content to this element on open
        tr
          td closeByBackdropClick
          td boolean
          td true
          td When enabled, sheet will be closed on backdrop click
        tr
          td closeByOutsideClick
          td boolean
          td false
          td When enabled, sheet will be closed on when click outside of it
        tr
          td animate
          td boolean
          td true
          td Whether the Sheet should be opened/closed with animation or not. Can be overwritten in <code>.open()</code> and <code>.close()</code> methods
        tr
          td on
          td object
          td
          td Object with events handlers. For example:
            :code(lang="js")
                  var sheet = app.sheet.create({
                    content: '<div class="sheet-modal">...</div>',
                    on: {
                      opened: function () {
                        console.log('Sheet opened')
                      }
                    }
                  })
    .important-note
      p Note that all following parameters can be used in global app parameters under <code>sheet</code> property to set defaults for all sheets. For example:
      :code(lang="js")
            var app = new Framework7({
              sheet: {
                closeByBackdropClick: false,
              }
            });
    h2 Sheet Methods & Properties
    p So to create Sheet we have to call:
    :code(lang="js")
          var sheet = app.sheet.create({ /* parameters */ })
    p After that we have its initialized instance (like <code>sheet</code> variable in example above) with useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td sheet.app
          td Link to global app instance
        tr
          td sheet.el
          td Sheet HTML element
        tr
          td sheet.$el
          td Dom7 instance with sheet HTML element
        tr
          td sheet.backdropEl
          td Backdrop HTML element
        tr
          td sheet.$backdropEl
          td Dom7 instance with backdrop HTML element
        tr
          td sheet.params
          td Sheet parameters
        tr
          td sheet.opened
          td Boolean prop indicating whether sheet is opened or not
        tr
          th(colspan="2") Methods
        tr
          td sheet.open(<span>animate</span>)
          td Open sheet. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default <code>true</code>) - defines whether it should be opened with animation
        tr
          td sheet.close(<span>animate</span>)
          td Close sheet. Where
            ul.method-parameters
              li
                span.parameter animate
                |  - <span class="parameter-type">boolean</span> (by default <code>true</code>) - defines whether it should be closed with animation
        tr
          td sheet.destroy()
          td Destroy sheet
        tr
          td sheet.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td sheet.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td sheet.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td sheet.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td sheet.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
    h2 Control Sheet With Links
    p It is possible to open and close required sheet (if you have them in DOM) using special classes and data attributes on links:
    .important-note
      ul
        li
          p To open sheet we need to add "<b>sheet-open</b>" class to any HTML element (prefered to link)
        li
          p To close sheet we need to add "<b>sheet-close</b>" class to any HTML element (prefered to link)
        li
          p If you have more than one sheet in DOM, you need to specify appropriate sheet via additional <b>data-sheet=".my-sheet"</b> attribute on this HTML element
    p According to above note:
    :code(lang="html")
          <!-- In data-sheet attribute we specify CSS selector of sheet we need to open -->
          <p><a href="#" data-sheet=".my-sheet" class="sheet-open">Open Sheet</a></p>

          <!-- And somewhere in DOM -->
          <div class="sheet-modal my-sheet">
            <div class="sheet-modal-inner">
              <!-- Link to close sheet -->
              <a class="link sheet-close">Close</a>
            </div>
          </div>


    h2 Sheet Events
    p Sheet will fire the following DOM events on sheet element and events on app and sheet instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td sheet:open
          td Sheet Element<span>&lt;div class="sheet"&gt;</span>
          td Event will be triggered when Sheet starts its opening animation
        tr
          td sheet:opened
          td Sheet Element<span>&lt;div class="sheet"&gt;</span>
          td Event will be triggered after Sheet completes its opening animation
        tr
          td sheet:close
          td Sheet Element<span>&lt;div class="sheet"&gt;</span>
          td Event will be triggered when Sheet starts its closing animation
        tr
          td sheet:closed
          td Sheet Element<span>&lt;div class="sheet"&gt;</span>
          td Event will be triggered after Sheet completes its closing animation
    h3 App and Sheet Instance Events
    p Sheet instance emits events on both self instance and app instance. App instance events has same names prefixed with <code>popup</code>.
    table.events-table
      thead
        tr
          th Event
          th Arguments
          th Target
          th Description
      tbody
        tr
          td open
          td <span>sheet</span>
          td sheet
          td(rowspan="2") Event will be triggered when Sheet starts its opening animation. As an argument event handler receives sheet instance
        tr
          td sheetOpen
          td <span>sheet</span>
          td app
        tr
          td opened
          td <span>sheet</span>
          td sheet
          td(rowspan="2") Event will be triggered after Sheet completes its opening animation. As an argument event handler receives sheet instance
        tr
          td sheetOpened
          td <span>sheet</span>
          td app
        tr
          td close
          td <span>sheet</span>
          td sheet
          td(rowspan="2") Event will be triggered when Sheet starts its closing animation. As an argument event handler receives sheet instance
        tr
          td sheetClose
          td <span>sheet</span>
          td app
        tr
          td closed
          td <span>sheet</span>
          td sheet
          td(rowspan="2") Event will be triggered after Sheet completes its closing animation. As an argument event handler receives sheet instance
        tr
          td sheetClosed
          td <span>sheet</span>
          td app
        tr
          td beforeDestroy
          td <span>sheet</span>
          td sheet
          td(rowspan="2") Event will be triggered right before Sheet instance will be destroyed. As an argument event handler receives sheet instance
        tr
          td sheetBeforeDestroy
          td <span>sheet</span>
          td app
    .with-device
      h2(data-device-preview="../docs-demos/core/sheet-modal.html") Examples
      :code(lang="html")
            <body>
              ...
                <div class="page">
                  <div class="navbar">
                    <div class="navbar-inner">
                      <!-- In data-sheet attribute we specify CSS selector of sheet we need to open-->
                      <div class="title">Sheet Modal</div>
                      <div class="right"><a class="link sheet-open" href="#" data-sheet=".my-sheet">Open Sheet</a></div>
                    </div>
                  </div>
                  <div class="page-content">
                    <div class="block">
                      <!-- In data-sheet attribute we specify CSS selector of sheet we need to open-->
                      <p><a class="link sheet-open" href="#" data-sheet=".my-sheet">Open Sheet</a></p>
                      <!-- Link to close sheet-->
                      <p><a class="link sheet-close" href="#" data-sheet=".my-sheet">Close Sheet</a></p>
                      <p><a class="link dynamic-sheet" href="#">Create Dynamic Sheet</a></p>
                    </div>
                  </div>
                </div>
              ...

              <div class="sheet-modal my-sheet">
                <div class="toolbar">
                  <div class="toolbar-inner">
                    <div class="left"></div>
                    <div class="right"><a class="link sheet-close" href="#">Done</a></div>
                  </div>
                </div>
                <div class="sheet-modal-inner">
                  <div class="block">
                    <h4>Info</h4>
                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ac diam ac quam euismod porta vel a nunc. Quisque sodales scelerisque est, at porta justo cursus ac.</p>
                  </div>
                </div>
              </div>
            </body>
      :code(lang="js")
            var app = new Framework7();

            var $$ = Dom7;

            // DOM events for my-sheet sheet
            $$('.my-sheet').on('sheet:open', function (e, sheet) {
              console.log('my-sheet open');
            });
            $$('.my-sheet').on('sheet:opened', function (e, sheet) {
              console.log('my-sheet opened');
            });

            // Create dynamic Sheet
            var dynamicSheet = app.sheet.create({
              content: '<div class="sheet-modal">'+
                          '<div class="toolbar">'+
                            '<div class="toolbar-inner">'+
                              '<div class="left"></div>'+
                              '<div class="right">'+
                                '<a class="link sheet-close">Done</a>'+
                              '</div>'+
                            '</div>'+
                          '</div>'+
                          '<div class="sheet-modal-inner">'+
                            '<div class="block">'+
                              '<p>Sheet created dynamically.</p>'+
                              '<p><a href="#" class="link sheet-close">Close me</a></p>'+
                            '</div>'+
                          '</div>'+
                        '</div>',
              // Events
              on: {
                open: function (sheet) {
                  console.log('Sheet open');
                },
                opened: function (sheet) {
                  console.log('Sheet opened');
                },
              }
            });
            // Events also can be assigned on instance later
            dynamicSheet.on('close', function (sheet) {
              console.log('Sheet close');
            });
            dynamicSheet.on('closed', function (sheet) {
              console.log('Sheet closed');
            });

            // Open dynamic sheet
            $$('.dynamic-sheet').on('click', function () {
              // Close inline sheet before
              app.sheet.close('.my-sheet');

              // Open dynamic sheet
              dynamicSheet.open();
            });
