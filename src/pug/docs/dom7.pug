extends ../_docs-template

block vars
  - var title = 'Dom7 - Custom DOM Library | Framework7 Documentation';

block content
  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Dom7 - Custom DOM Library
    ul.docs-index
    p Framework7 doesn't use any third party library, even for DOM manipulation. It has its own custom DOM7 - DOM library that utilizes most edge and high-performance methods for DOM manipulation. You donâ€™t need to learn something new, its usage is very simple because it has the same syntax as well known jQuery library with support of the most popular and widely used methods and jQuery-like chaining.
    p To start use it there is a <code>Dom7</code> global window function, but we recommend to assign it to some local variable with more handy name, like <code>$$</code>, but not to "$" to prevent confilicts with other libraries like jQuery or Zepto:
    :code(lang="js")
          //Export DOM7 to local variable to make it easy accessable
          var $$ = Dom7;
    h2 Usage Example
    p Just everything you already know:
    :code(lang="js")
          $$('.something').on('click', function (e) {
              $$(this).addClass('hello').attr('title', 'world').insertAfter('.something-else');
          });
    h2 Available Methods
    p All these methods works almost in the same way and with the same arguments as in jQuery or Zepto:
    table.methods-table.dom7-table
      tbody
        tr
          th(colspan="2") Classes
        tr
          td .addClass(<span>className</span>)
          td Add class to elements
            :code(lang="js")
                  //Add "intro" class to all paragraphs
                  $$('p').addClass('intro');
        tr
          td .removeClass(<span>className</span>)
          td Remove specified class
            :code(lang="js")
                  //Add "big" class from all links with "big" class
                  $$('a.big').removeClass('big');
        tr
          td .hasClass(<span>className</span>)
          td Determine whether any of the matched elements are assigned the given class:
            :code(lang="html")
                  &lt;p class="intro"&gt;Lorem ipsum...&lt;/p&gt;
            :code(lang="js")
                  $$('p').hasClass('intro'); //-> true
        tr
          td .toggleClass(<span>className</span>)
          td Remove (if class is present) or add (if not) one or more classes from each element in the set of matched elements:
            :code(lang="html")
                  &lt;!-- Before --&gt;
                  &lt;h1 class="small"&gt;This is first title&lt;/h1&gt;
                  &lt;h2&gt;This is subtitle&lt;/h2&gt;
            :code(lang="js")
                  $$('h1, h2').toggleClass('small');
            :code(lang="html")
                  &lt;!-- After --&gt;
                  &lt;h1&gt;This is first title&lt;/h1&gt;
                  &lt;h2 class="small"&gt;This is subtitle&lt;/h2&gt;
        tr
          th(colspan="2") Attributes and properties
        tr
          td .prop(<span>propName</span>)
          td Get property value:
            :code(lang="js")
                  var isChecked = $$('input').prop('checked');
        tr
          td .prop(<span>propName</span>, <span>propValue</span>)
          td Set single property value:
            :code(lang="js")
                  //Make all checkboxes checked
                  $$('input[type="checkbox"]').prop('checked', true);
        tr
          td .prop(<span>propertiesObject</span>)
          td Set multiple properties:
            :code(lang="js")
                  $$('input').prop({
                    checked: false,
                    disabled: true
                  })
        tr
          td .attr(<span>attrName</span>)
          td Get attribute value:
            :code(lang="html")
                  &lt;a href="http://google.com"&gt;Google&lt;/a&gt;
            :code(lang="js")
                  var link = $$('a').attr('href'); //-&gt; http://google.com
        tr
          td .attr(<span>attrName</span>, <span>attrValue</span>)
          td Set single attribute value:
            :code(lang="js")
                  //Set all links to google
                  $$('a').attr('href', 'http://google.com');
        tr
          td .attr(<span>attributesObject</span>)
          td Set multiple attributes:
            :code(lang="js")
                  $$('a').attr({
                    id: 'new-id',
                    title: 'Link to Google',
                    href: 'http://google.com'
                  })
        tr
          td .removeAttr(<span>attrName</span>)
          td Remove specified attribute:
            :code(lang="js")
                  //Remove "src" attribute from all images
                  $$('img').removeAttr('src');
        tr
          td .val()
          td Get the current value of the first element in the set of matched elements
            :code(lang="html")
                  &lt;input id="myInput" type="text" value="Lorem ipsum"/&gt;
            :code(lang="js")
                  var inputVal = $$('#myInput').val(); //-> 'Lorem ipsum'
        tr
          td .val(<span>newValue</span>)
          td Set the value of every matched element
            :code(lang="js")
                  $$('input#myInput').val('New value here');
        tr
          th(colspan="2") Data storage
        tr
          td .data(<span>key</span>, <span>value</span>)
          td Store arbitrary data associated with the matched elements
            :code(lang="js")
                  $$('a').data('user', {
                      id: '123',
                      name: 'John',
                      email: 'john@doe.com'
                  });
        tr
          td .data(<span>key</span>)
          td Return the value at the named data store for the first element in the collection, as set by data(key, value) or by an HTML5 data-* attribute
            :code(lang="js")
                  var user = $$('a').data('user');
                  //-> {id: '123', name: 'John', email: 'john@doe.com'}
            p or
            :code(lang="html")
                  &lt;p data-id="123"&gt;Lorem ipsum...&lt;/p&gt;
            :code(lang="js")
                  var id = $$('p').data('id'); //-> 123
        tr
          td .removeData(<span>key</span>)
          td Remove specified data
            :code(lang="js")
                  $$('a').removeData('user')
        tr
          th(colspan="2") Data Set
        tr
          td .dataset()
          td Returns element's data set (set of data- attributes) as plain Object
            :code(lang="html")
                  &lt;div id="my-div" data-loop="true" data-animate-pages="false" data-index="0" data-hello="world"&gt;
                      ...
                  &lt;/div&gt;
            :code(lang="js")
                  var dataset = $$('#my-div').dataset();
                  /*
                  dataset will contain plain object with camelCase keys and with formatted boolean and number types:
                  {
                      loop: true,
                      animatePages: false,
                      index: 0,
                      hello: 'world'
                  }
                  */
        tr
          th(colspan="2") CSS transform, transitions
        tr
          td .transform(<span>CSSTransformString</span>)
          td Adds prefixed CSS transform property:
            :code(lang="js")
                  $$('a').transform('rotate(90deg)')</code>
        tr
          td .transition(<span>transitionDuration</span>)
          td Set CSS transition-duration property to collection:
            :code(lang="js")
                  $$('p').transition(300)</code>
        tr
          th(colspan="2") Events
        tr
          td .on(<span>eventName</span>, <span>handler</span>, <span>useCapture</span>)
          td Add event handler function to one or more events to the selected elements.
            :code(lang="js")
                  $$('a').on('click', function (e) {
                    console.log('clicked');
                  });
            :code(lang="js")
                  $$('input[type="text"]').on('keyup keydown change', function (e) {
                    console.log('input value changed');
                  });
        tr
          td .on(<span>eventName</span>, <span>delegatedTarget</span>, <span>handler</span>, <span>useCapture</span>)
          td Live/delegated event handler
            :code(lang="js")
                  $$(document).on('click', 'a', function (e) {
                    console.log('link clicked');
                  });
        tr
          td .once(<span>eventName</span>, <span>handler</span>, <span>useCapture</span>)
          td Add event handler function to one or more events to the selected elements that will be executed only once
            :code(lang="js")
                  $$('a').once('click', function (e) {
                    console.log('clicked');
                  });
            :code(lang="js")
                  $$('input[type="text"]').once('keyup keydown change', function (e) {
                    console.log('input value changed');
                  });
        tr
          td .once(<span>eventName</span>, <span>delegatedTarget</span>, <span>handler</span>, <span>useCapture</span>)
          td Live/delegated event handler that will be executed only once
            :code(lang="js")
                  $$(document).once('click', 'a', function (e) {
                    console.log('link clicked');
                  });
        tr
          td .off(<span>eventName</span>, <span>handler</span>, <span>useCapture</span>)
          td Remove event handler
            :code(lang="js")
                  function clickHandler(){
                      console.log('clicked');
                  }
                  // Add event listener
                  $$('a').on('click', clickHandler);
                  // Remove event listener
                  $$('a').off('click', clickHandler);

        tr
          td .off(<span>eventName</span>, <span>delegatedTarget</span>, <span>handler</span>, <span>useCapture</span>)
          td Remove live/delegated event handler
            :code(lang="js")
                  function clickHandler(){
                      console.log('clicked');
                  }
                  // Add event listener
                  $$(document).on('click', 'a', clickHandler);
                  // Remove event listener
                  $$(document).off('click', 'a', clickHandler);
        tr
          td .trigger(<span>eventName</span>, <span>eventData</span>)
          td Execute all handlers added to the matched elements for the specified event
          :code(lang="js")
                $$(window).trigger('resize');
        tr
          td .transitionEnd(<span>callback</span>, <span>permanent</span>)
          td Adds prefixed transitionEnd event handler to collection:
            :code(lang="js")
                  $$('a').transitionEnd(function(){ /* do something */ })
        tr
          td .animationEnd(<span>callback</span>)
          td Adds prefixed animationEnd event handler to collection:
            :code(lang="js")
                  $$('a').animationEnd(function(){ /* do something */ })
        tr
          th(colspan="2") Styles
        tr
          td .width()
          td Get the current computed width for the first element in the set of matched elements
            :code(lang="js")
                  var boxWidth = $$('div#box').width();
        tr
          td .outerWidth(<span>[includeMargin]</span>)
          td Get the current computed width for the first element in the set of matched elements, including padding and border, and margin (if includeMargin is <b>true</b>)
            :code(lang="js")
                  var outerWidth = $$('div#box').outerWidth(true);
        tr
          td .height()
          td Get the current computed height for the first element in the set of matched elements
            :code(lang="js")
                  var boxHeight = $$('div#box').height();
        tr
          td .outerHeight(<span>[includeMargin]</span>)
          td Get the current computed height for the first element in the set of matched elements, including padding and border, and margin (if includeMargin is <b>true</b>)
            :code(lang="js")
                  var outerHeight = $$('div#box').outerHeight(true);
        tr
          td .offset()
          td Get the current coordinates of the first element relative to the document
            :code(lang="js")
                  var coords = $$('.content').offset(); //-> {top: 100, left: 200}
                  var top = coords.top; //-> 100
                  var left = coords.left; //-> 200
        tr
          td .hide()
          td Set "display:none" to the matched elements
            :code(lang="js")
                  //hide all paragraphs
                  $$('p').hide();
        tr
          td .show()
          td Set "display:block" to the matched elements
            :code(lang="js")
                  //show all paragraphs
                  $$('p').show();
        tr
          td .css(<span>property</span>)
          td Get value of specified CSS property for the first element:
            :code(lang="js")
                  $$('.content').css('left'); //-> 200px
        tr
          td .css(<span>property</span>, <span>value</span>)
          td Set specified CSS property to the matched elements:
            :code(lang="js")
                  $$('.content').css('left', '100px');
        tr
          td .css(<span>propertiesObject</span>)
          td Set multiple CSS properties to the matched elements:
            :code(lang="js")
                  $$('a').css({
                      left: '100px',
                      top: '200px',
                      color: 'red',
                      width: '300px',
                      marginLeft: '17px',
                      'padding-right': '20px'
                  });
        tr
          th(colspan="2") Scroll
        tr
          td .scrollTop()
          td Get scrollTop position of element
        tr
          td .scrollTop(<span>position</span>, <span>duration</span>, <span>callback</span>)
          td Set scrollTop "position" with animation during "duration" (in ms). Scroll top position will be set immediately if duration is not specified. If you have specified "callback" function, then it will be executed after scrolling completed
        tr
          td .scrollLeft()
          td Get scrollLeft position of element
        tr
          td .scrollLeft(<span>position</span>, <span>duration</span>, <span>callback</span>)
          td Set scrollLeft "position" with animation during "duration" (in ms). Scroll left postion will be set immediately if duration is not specified. If you have specified "callback" function, then it will be executed after scrolling completed
        tr
          td .scrollTo(<span>left</span>, <span>top</span>, <span>duration</span>, <span>callback</span>)
          td Set scroll left and scroll top with animation during "duration" (in ms). Scroll postion will be set immediately if duration is not specified. If you have specified "callback" function, then it will be executed after scrolling completed
        tr
          th(colspan="2") Dom Manipulation
        tr
          td .add(elements)
          td Create a new Dom7 collection with elements added to the set of matched elements:
            :code(lang="js")
                  var links = $$('a');
                  var divs = $$('div');
                  links.add('p').addClass('blue');
                  links.add(divs).addClass('red');

        tr
          td .each(<span>callback</span>)
          td Iterate over collection, executing a callback function for each matched element
        tr
          td .html()
          td Get the HTML contents of the first element in the set of matched elements
        tr
          td .html(<span>newInnerHTML</span>)
          td Set the HTML contents of every matched element
        tr
          td .text()
          td Get the text contents of the first element in the set of matched elements
        tr
          td .text(<span>newTextContent</span>)
          td Set the text contents of every matched element
        tr
          td .is(<span>CSSSelector</span>)
          td Check the current matched set of elements against CSS selector
        tr
          td .is(<span>HTMLElement</span>)
          td Check the current matched set of elements against HTML element or Dom7 collection
        tr
          td .index()
          td Return the position of the first element within the Dom7 collection relative to its sibling elements
        tr
          td .eq(<span>index</span>)
          td Reduce the set of matched elements to the one at the specified index
        tr
          td .append(<span>HTMLString</span>)
          td Insert content, specified by the parameter, to the end of each element in the set of matched elements
        tr
          td .append(<span>HTMLElement</span>)
          td Insert specified HTML element to the end of element in the set of matched elements
        tr
          td .appendTo(<span>HTMLElement</span>)
          td Insert content/elements, to the end of element specified in parameter
        tr
          td .prepend(<span>newHTML</span>)
          td Insert content, specified by the parameter, to the beginning of each element in the set of matched elements
        tr
          td .prepend(<span>HTMLElement</span>)
          td Insert specified HTML element to the beginning of element in the set of matched elements
        tr
          td .prependTo(<span>HTMLElement</span>)
          td Insert content/elements, to the beginning of element specified in parameter
        tr
          td .insertBefore(<span>target</span>)
          td Insert every element in the set of matched elements before the target. Target could be specified as CSS selector or HTML element or Dom7 collection
        tr
          td .insertAfter(<span>target</span>)
          td Insert every element in the set of matched elements after the target. Target could be specified as CSS selector or HTML element or Dom7 collection
        tr
          td .next(<span>[selector]</span>)
          td Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector
        tr
          td .nextAll(<span>[selector]</span>)
          td Get all following siblings of each element in the set of matched elements, optionally filtered by a selector
        tr
          td .prev(<span>[selector]</span>)
          td Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector
        tr
          td .prevAll(<span>[selector]</span>)
          td Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector
        tr
          td .siblings(<span>[selector]</span>)
          td Get the siblings of each element in the set of matched elements, optionally filtered by a selector
        tr
          td .parent(<span>[selector]</span>)
          td Get the first parent of each element in the current set of matched elements, optionally filtered by a selector
        tr
          td .parents(<span>[selector]</span>)
          td Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector
        tr
          td .closest(<span>[selector]</span>)
          td For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree
        tr
          td .find(<span>selector</span>)
          td Get the descendants of each element in the current set of matched elements, filtered by a selector
        tr
          td .children(<span>selector</span>)
          td Get the children of each element in the set of matched elements, optionally filtered by a selector
        tr
          td .filter(<span>callback</span>)
          td Filter collection of elements
            :code(lang="js")
                  var redLinks = $$('a').filter(function(index, el) {
                      return $$(this).hasClass('red');
                  })

        tr
          td .remove()
          td Remove/detach matched elements from the Dom
        tr
          td .empty()
          td Remove all child nodes of the set of matched elements from the DOM. Alias for <code>.html('')</code>
        tr
          th(colspan="2") Shortcuts
        tr
          td .click()
          td Trigger "click" event on collection
        tr
          td .click(<span>handler</span>)
          td Add "click" event handler to collection
        tr
          td .blur()
          td Trigger "blur" event on collection
        tr
          td .blur(<span>handler</span>)
          td Add "blur" event handler to collection
        tr
          td .focus()
          td Trigger "focus" event on collection
        tr
          td .focus(<span>handler</span>)
          td Add "focus" event handler to collection
        tr
          td .focusin()
          td Trigger "focusin" event on collection
        tr
          td .focusin(<span>handler</span>)
          td Add "focusin" event handler to collection
        tr
          td .focusout()
          td Trigger "focusout" event on collection
        tr
          td .focusout(<span>handler</span>)
          td Add "focusout" event handler to collection

        tr
          td .keyup()
          td Trigger "keyup" event on collection
        tr
          td .keyup(<span>handler</span>)
          td Add "keyup" event handler to collection

        tr
          td .keydown()
          td Trigger "keydown" event on collection
        tr
          td .keydown(<span>handler</span>)
          td Add "keydown" event handler to collection
        tr
          td .keypress()
          td Trigger "keypress" event on collection
        tr
          td .keypress(<span>handler</span>)
          td Add "keypress" event handler to collection

        tr
          td .submit()
          td Trigger "submit" event on collection
        tr
          td .submit(<span>handler</span>)
          td Add "submit" event handler to collection
        tr
          td .change()
          td Trigger "change" event on collection
        tr
          td .change(<span>handler</span>)
          td Add "change" event handler to collection

        tr
          td .mousedown()
          td Trigger "mousedown" event on collection
        tr
          td .mousedown(<span>handler</span>)
          td Add "mousedown" event handler to collection

        tr
          td .mousemove()
          td Trigger "mousemove" event on collection
        tr
          td .mousemove(<span>handler</span>)
          td Add "mousemove" event handler to collection

        tr
          td .mouseup()
          td Trigger "mouseup" event on collection
        tr
          td .mouseup(<span>handler</span>)
          td Add "mouseup" event handler to collection

        tr
          td .mouseenter()
          td Trigger "mouseenter" event on collection
        tr
          td .mouseenter(<span>handler</span>)
          td Add "mouseenter" event handler to collection

        tr
          td .mouseleave()
          td Trigger "mouseleave" event on collection
        tr
          td .mouseleave(<span>handler</span>)
          td Add "mouseleave" event handler to collection

        tr
          td .mouseout()
          td Trigger "mouseout" event on collection
        tr
          td .mouseout(<span>handler</span>)
          td Add "mouseout" event handler to collection

        tr
          td .mouseover()
          td Trigger "mouseover" event on collection
        tr
          td .mouseover(<span>handler</span>)
          td Add "mouseover" event handler to collection

        tr
          td .touchstart()
          td Trigger "touchstart" event on collection
        tr
          td .touchstart(<span>handler</span>)
          td Add "touchstart" event handler to collection

        tr
          td .touchend()
          td Trigger "touchend" event on collection
        tr
          td .touchend(<span>handler</span>)
          td Add "touchend" event handler to collection

        tr
          td .touchmove()
          td Trigger "touchmove" event on collection
        tr
          td .touchmove(<span>handler</span>)
          td Add "touchmove" event handler to collection

        tr
          td .resize(<span>handler</span>)
          td Add "resize" event handler to collection

        tr
          td .scroll(<span>handler</span>)
          td Add "scroll" event handler to collection
    h2 Animation
    .method-wrap
      p
        span.method .animate(<span>properties</span>, <span>parameters</span>)
        span - Perform a custom animation of a set of CSS properties
      ul.method-parameters
        li
          span.parameter properties
          |  - <span class="parameter-type">object</span> - CSS properties to animate
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span> - animation parameters
      p.method-returns returns Dom7 collection
    :code(lang="js")
          $$('#animate-me').animate(
              /* CSS properties to animate, e.g.: */
              {
                  'margin-left': 100,
                  'width': 200,
                  'height': 300,
                  'opacity': 0.5
              },
              /* Animation parameters */
              {
                  // Animation duraion in ms, optional (default to 300)
                  duration: 300,
                  // Animation easing, optional (default to 'swing'), can be also 'linear'
                  easing: 'swing',
                  /* Callbacks */
                  // Animation begins, optional
                  begin: function (elements) {
                      console.log('animation began');
                  },
                  // Animation completed, optional
                  complete: function (elements) {
                      console.log('animation completed');
                  },
                  // Animation in progress, optional
                  progress: function (elements, complete, remaining, start) {
                      /* Where
                      complete - The call's completion percentage (as a decimal value)
                      remaining - How much time remains until the call completes (in ms)
                      start - The absolute time at which the call began (in ms)
                      */
                      console.log('animation in progress');
                  }
              }
          );
    p It also supports chaining que:
    :code(lang="js")
          $$('#animate-me')
              .animate(
                  {
                      'margin-left': 100,
                      'width': 200,
                      'height': 300,
                      'opacity': 0.5
                  }
              )
              .animate(
                  {
                      'width': 50,
                      'height': 50
                  }
              );
