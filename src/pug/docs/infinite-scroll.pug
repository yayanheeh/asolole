extends ../_docs-template

block vars
  - var title = 'Infinite Scroll | Framework7 Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu
  .docs-content
    +improveDocsLink
    h1 Infinite Scroll
    ul.docs-index
    p Infinite Scroll allows to load additional content or do any other required action when page scroll is near to the bottom.

    h2 Infinite Scroll Layout
    p To enable Infinite Scroll you need to add additional <code><b>infinite-scroll-content</b></code> class to any scrollable container, particularly to our page scrolling area - <code>&lt;div class="page-content"&gt;</code>:
    :code(lang="html")
          <div class="page">
              <div class="page-content infinite-scroll-content infinite-scroll-top">
                  ...
                  <div class="preloader infinite-scroll-preloader"></div>
              </div>
          </div>
    p Where:
    ul
      li
        p <code>div class="page-content infinite-scroll-content"</code> our infinite scroll container
      li
        p <code>data-infinite-distance</code> attribute allows to configure distance from the bottom of page (in px) to trigger infinite scroll event. By default, if not specified, it is <b>50</b> (px)
      li
        p <code>div class="preloader infinite-scroll-preloader"</code> <a href="preloader.html">preloader</a> with few additional styles to be used with infinite scroll
    h2 Infinite Scroll On Top
    p If you need to use infinite scroll on top of the page (when it scrolled to top), you need to add additional <code><b>infinite-scroll-top</b></code> class to "page-content":
    :code(lang="html")
          <div class="page">
              <div class="page-content infinite-scroll-content infinite-scroll-top">
                  <div class="preloader infinite-scroll-preloader"></div>
                  ...
              </div>
          </div>
    h2 Infinite Scroll App Methods
    p There are two App's methods that can be used with infinite scroll container:
    .method-wrap
      p
        span.method app.infiniteScroll.create(<span>el</span>)
        span - add infinite scroll event listener to the specified HTML element
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS selector) - infinite scroll container. Required.
      .important-note Use this methods only in case you have added infinite scroll content after page init or if you want to enable it later. Otherwise if there is "infinite-scroll-content" element on page init it will be created automatically

    .method-wrap
      p
        span.method app.infiniteScroll.destroy(<span>el</span>)
        span - remove infinite scroll event listener from the specified HTML container
      ul.method-parameters
        li
          span.parameter el
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS selector) - infinite scroll container. Required.
    h2 Infinite Scroll Events
    p Infinite Scroll will fire the following DOM events on app instance:
    h3 Dom Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td infinite
          td Infinite Scroll container<span>&lt;div class="page-content infinite-scroll-content"&gt;</span>
          td Event will be triggered when page scroll reaches specified (in data-distance attribute) distance to the bottom.
    h3 App Events
    p Infinite scroll component emits events on app instance as well as on DOM element.
    table.events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td infinite
          td app
          td <span>(el, event)</span>
          td Event will be triggered when page scroll reaches specified (in data-distance attribute) distance to the bottom.

    .with-device
      h2(data-device-preview="../docs-demos/core/infinite-scroll.html") Example
      :code(lang="html")
            <div class="page" data-page="home">
              ...
              <div class="page-content infinite-scroll-content">
                <div class="list simple-list">
                  <ul>
                    <li>Item 1</li>
                    <li>Item 2</li>
                    <li>Item 3</li>
                    <li>Item 4</li>
                    <li>Item 5</li>
                    <li>Item 6</li>
                    <li>Item 7</li>
                    <li>Item 8</li>
                    <li>Item 9</li>
                    <li>Item 10</li>
                    <li>Item 11</li>
                    <li>Item 12</li>
                    <li>Item 13</li>
                    <li>Item 14</li>
                    <li>Item 15</li>
                    <li>Item 16</li>
                    <li>Item 17</li>
                    <li>Item 18</li>
                    <li>Item 19</li>
                    <li>Item 20</li>
                  </ul>
                </div>
                <div class="preloader infinite-scroll-preloader"></div>
              </div>
            </div>
      :code(lang="js")
            var app = new Framework7();

            var $$ = Dom7;

            // Loading flag
            var allowInfinite = true;

            // Last loaded index
            var lastItemIndex = $$('.list li').length;

            // Max items to load
            var maxItems = 200;

            // Append items per load
            var itemsPerLoad = 20;

            // Attach 'infinite' event handler
            $$('.infinite-scroll-content').on('infinite', function () {
              // Exit, if loading in progress
              if (!allowInfinite) return;

              // Set loading flag
              allowInfinite = false;

              // Emulate 1s loading
              setTimeout(function () {
                // Reset loading flag
                allowInfinite = true;

                if (lastItemIndex >= maxItems) {
                  // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings
                  app.infiniteScroll.destroy('.infinite-scroll-content');
                  // Remove preloader
                  $$('.infinite-scroll-preloader').remove();
                  return;
                }

                // Generate new items HTML
                var html = '';
                for (var i = lastItemIndex + 1; i <= lastItemIndex + itemsPerLoad; i++) {
                  html += '<li>Item ' + i + '</li>';
                }

                // Append new items
                $$('.list ul').append(html);

                // Update last loaded index
                lastItemIndex = $$('.list li').length;
              }, 1000);
            });

