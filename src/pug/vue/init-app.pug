extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Initialize App | Framework7 Vue Documentation';

block content

  .docs-nav
    include ../_docs-menu-vue
  .docs-content
    +improveDocsLink
    h1 Initialize App
    ul.docs-index
    p After we have our <a href="app-layout.html">app layout</a> now we need to mount Vue components and initialize the app. You can read about all possible Framework7 initialization parameters in appropriate <a href="../docs/app.html#app-parameters">Framework7 App Parameters</a> section.
    h2 Plain Initiliazation Structure
    p Let's look at the simple plain app structure, where we don't use any bundlers in our app, just a plain html + js files. Full layout again, but with script:
    :code(lang="html")
          <!-- index.html -->

          <!DOCTYPE html>
          <html>
            <head>
              <!-- ... metas and styles ... -->
              <link rel="stylesheet" href="path/to/framework7.min.css">
            </head>
            <body>
              <!-- App Root Element -->
              <div id="app">
                <!-- Main Framework7 App component where we pass Framework7 params -->
                <f7-app :params="$root.f7params">
                  <f7-statusbar></f7-statusbar>
                  <f7-view main>
                    <!-- Initial Page -->
                    <f7-page>
                      <f7-navbar title="Awesome App"></f7-navbar>
                      <f7-toolbar>
                        <f7-link>Link 1</f7-link>
                        <f7-link>Link 2</f7-link>
                      </f7-toolbar>
                      <p>Page content goes here</p>
                      <f7-link href="/about/">About App</f7-link>
                    </f7-page>
                  </f7-view>
                </f7-app>
              </div>
              <script type="text/javascript" src="path/to/vue.min.js"></script>
              <script type="text/javascript" src="path/to/framework7.min.js"></script>
              <script type="text/javascript" src="path/to/framework7-vue.min.js"></script>
              <script type="text/javascript" src="path/to/my-app.js"></script>
            </body>
          </html>
    :code(lang="js")
          /* my-app.js */

          // First of all, we need to initialize/enable Framework7 Vue plugin:
          // We need to pass Framework7Vue plugin to Framework7's .use() method
          Framework7.use(Framework7Vue);

          // Init Vue App
          new Vue({
            // App Root Element
            el: '#app',

            // App root data
            data() {
              return {
                // Framework7 parameters that we pass to <f7-app> component
                f7params: {
                  // Array with app routes
                  routes: [...]
                  // App Name
                  name: 'My App',
                  // App id
                  id: 'com.myapp.test',
                  // ...
                }
              };
            },
            // App root methods
            methods: {
              // ....
            }
          })
    h2 With Bundlers
    p If you use Webpack, Rollup or another bundler with ES-next modules support, we may have the following structure:
    :code(lang="html")
          <!-- index.html -->

          <!DOCTYPE html>
          <html>
            <head>
              <!-- ... metas and styles ... -->
              <link rel="stylesheet" href="path/to/framework7.min.css">
            </head>
            <body>
              <!-- App Root Element -->
              <div id="app"></div>
              <script type="text/javascript" src="path/to/my-app.js"></script>
            </body>
          </html>
    :code(lang="js")
          /* my-app.js */

          // Import Vue
          import Vue from 'vue'

          // Import F7 Bundle
          import Framework7 from 'framework7/framework7.esm.bundle.js'

          // Import F7-Vue Plugin Bundle (with all F7 components registered)
          import Framework7Vue from 'framework7-vue/framework7-vue.esm.bundle.js'

          // Init F7-Vue Plugin
          Framework7.use(Framework7Vue);

          // Import Main App component
          import App from './app.vue';

          // Init App
          new Vue({
            el: '#app',
            render: (h) => h(App),
            // ...
          });
    :code(lang="html")
          <!-- app.vue -->

          <template>
            <!-- Main Framework7 App component where we pass Framework7 params -->
            <f7-app :params="f7params">
              <f7-statusbar></f7-statusbar>
              <!-- initial page is specified in routes.js -->
              <f7-view main url="/"></f7-view>
            </f7-app>
          </template>
          <script>
            import routes from './routes.js';

            export default {
              data() {
                return {
                  // Framework7 parameters that we pass to <f7-app> component
                  f7params: {
                    // Array with app routes
                    routes,
                    // App Name
                    name: 'My App',
                    // App id
                    id: 'com.myapp.test',
                    // ...
                  }
                }
              }
            }
          </script>

    p In the examples above:
    ul
      li we pass <a href="../docs/init-app.html">Framework7 parameters</a> to the <code>f7-app</code> main Framework7 app component in its <code><b>params</b></code> property;
      li element passed in Vue's <code>el</code> parameter will be used as Framework7 root element
    p We also must specify array with routes (if we have navigation between pages in the app). Check out information about <a href="vue-component-extensions.html">Vue Component Extensions</a>, router and routes in the <a href="navigation-router.html">Navigation Router</a> section.

