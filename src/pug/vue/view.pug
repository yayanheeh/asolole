extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'View Vue Component | Framework7 Vue Documentation';

block content

  .docs-nav
    include ../_docs-menu-vue
  .docs-content
    +improveDocsLink
    h1 View Vue Component
    ul.docs-index
    p <b>View</b> - is a separate visual part of app with its own settings, navigation and history. Each view also may have different navbar and toolbar layouts, different styles. So it is some kind of app in app. Such kind of functionality allows you easily manipulate each part of your app.
    p View Vue component represents Framework7's <a href="../docs/view.html">View</a> component.

    h2 View Components
    p There are following components included:
    ul
      li <code><b>f7-view</b></code> - single View-router component
      li <code><b>f7-views</b></code> - wrapper element for multiple views used as Tabs

    h2 View Properties
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          th(colspan="4") &lt;f7-view&gt; properties
        tr
          td init
          td boolean
          td true
          td Initializes View automatically
        tr
          td tab
          td boolean
          td
          td Uses View as Tab
        tr
          td tab-active
          td boolean
          td
          td Defines View-Tab as currently active Tab
        tr
          td(colspan="4")
            .important-note(style="font-weight: bold") View Vue component also accepts all <a href="../docs/view.html#view-parameters">View Parameters</a>. All of them can be passed via separate props on <code><b>&lt;f7-view&gt;</b></code> component
        tr
          th(colspan="4") &lt;f7-views&gt; properties
        tr
          td tabs
          td boolean
          td
          td Uses Views as Tabs wrapper container

    h2 View Events
    p Swipe-back related events are available only in iOS theme.
    table.events-table
      thead
        tr
          th Event
          th Description
      tbody
        tr
          td view:init
          td Event will be triggered on View initialization
        tr
          td swipeback:move
          td Event will be triggered during swipe back move
        tr
          td swipeback:beforechange
          td Event will be triggered right before swipe back animation to previous page when you release it
        tr
          td swipeback:afterchange
          td Event will be triggered after swipe back animation to previous page when you release it
        tr
          td swipeback:beforereset
          td Event will be triggered right before swipe back animation to current page when you release it
        tr
          td swipeback:afterreset
          td Event will be triggered after swipe back animation to current page when you release it
        tr
          td tab:show
          td Event will be triggered when View-Tab becomes visible/active
        tr
          td tab:hide
          td Event will be triggered when View-Tab becomes invisible/inactive
    h2 Access To View Instance
    p If you use automatic initalization to init the View (with <code>init:true</code> prop) and need to use <a href="../docs/view.html">View API</a> (like router) you can access its initialized instance:
    ul
      li by accessing <code><b>.f7View</b></code> component's property
      li if you have passed <b>name</b> property (e.g. "left") you can access it like <code>this.$f7.views.left</code>
      li main view (with <b>main="true"</b> prop) is always accessible via <code>this.$f7.views.main</code>

    h2 Examples
    h4 Minimal layout
    :code(lang="html")
          <f7-view main>
            ...
          </f7-view>

          <!-- Renders to: -->

          <div class="view view-main">
            ...
          </div>
    h4 Views As Tabs
    :code(lang="html")
          <f7-app>
            ...
            <f7-views tabs>
              <f7-view id="tab-1" main tab tab-active>...</f7-view>
              <f7-view id="tab-2" tab>...</f7-view>
            </f7-views>
            ...
          </f7-app>

          <!-- Renders to: -->
          <div class="framework7-root">
            <div class="views tabs">
              <div class="view view-main tab tab-active" id="tab-1">...</div>
              <div class="view tab" id="tab-2">...</div>
            </div>
          </div>

    h4 With parameters
    :code(lang="html")
          <f7-view
            url="/home/"
            :animate="false"
            :ios-dynamic-navbar="false"
            :push-state="true"
          >
            ...
          </f7-view>
