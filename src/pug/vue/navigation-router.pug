extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Navigation Router | Framework7 Vue Documentation';

block content

  .docs-nav
    include ../_docs-menu-vue
  .docs-content
    +improveDocsLink
    h1 Navigation Router
    ul.docs-index
    p Framework7-Vue as Framework7 itself comes with powerful and flexible router. And to make it work we must specify <a href="../docs/routes.html">Routes</a>.
    p The only difference in Framework7-Vue is that in Vue.js we are already composing our application with Vue components, so we need to map our Pages (Vue components) to the routes. It can be done by passing Vue component in <code>component</code> property of the route. Here's a basic example:
    :code(lang="html")
          <!-- app.vue -->
          <template>
            <f7-app :params="f7params">
              <!-- Current View/Router, initial page will be loaded from home.vue component -->
              <f7-view main url="/"></f7-view>
            </f7-app>
          </template>

          <script>
            /* Import pages components */
            import HomePage from 'home.vue'
            import AboutPage from 'about.vue'
            import LoginPage from 'login.vue'

            /*
            Now we need to map components to routes.
            We need to pass them along with the F7 app parameters to <f7-app> component
            */

            export default {
              data() {
                return {
                  // app params
                  f7params: {
                    name: 'My App',
                    id: 'com.myapp.test',
                    // specify routes for app
                    routes: [
                      {
                        path: '/',
                        component: HomePage,
                      },
                      {
                        path: '/about/',
                        component: AboutPage,
                      },
                      {
                        path: '/login/',
                        component: LoginPage,
                      },
                      // ...
                    ],
                    // ...
                  }
                };
              },
            }
          </script>

    :code(lang="html")
          <!-- home.vue -->
          <template>
            <f7-page name="home">
              <f7-navbar title="Home"></f7-navbar>
              <!-- Page content -->
              ...
              <f7-link href="/about/">About Page</f7-link>
              <f7-link href="/login/">Login Page</f7-link>
            </f7-page>
          </template>
          <script>
            export default {}
          </script>


          <!-- about.vue -->
          <template>
            <f7-page name="about">
              <f7-navbar title="About"></f7-navbar>
              <!-- Page content -->
            </f7-page>
          </template>
          <script>
            export default {}
          </script>

          <!-- login.vue -->
          <template>
            <f7-page name="login">
              <f7-navbar title="Login"></f7-navbar>
              <!-- Page content -->
            </f7-page>
          </template>
          <script>
            export default {}
          </script>
    .important-note
      p Check the full <a href="../docs/routes.html">Routes Documentation</a> to know about all possible routes options, how to use <a href="../docs/routes.html#nested-routes">Nested Routes</a>, <a href="../docs/routes.html#routable-tabs">Routable Tabs</a> and <a href="../docs/routes.html#routable-modals">Routable Modals</a>.
    h2 Pass Props To Components
    p It is possible to pass component props to Vue components loaded by router. There are few ways to do it.
    p First of all, all route params will be automatically passed as props to component, e.g.
    :code(lang="js")
      // route with params
      {
        path: '/blog/:postId/comments/:commentId/',
        component: BlogPost,
      }
    p So if we navigate by <code>/blog/45/comments/122/</code> URL, then the following data will be passed to props:
    :code(lang="js")
      {
        postId: '45',
        commentId: '122',
      }
    p Another option is to specify props in route's <code>options</code>:
    :code(lang="js")
      {
        path: '/some-page/',
        component: SomeComponent,
        options: {
          props: {
            foo: 'bar',
            bar: true,
          },
        },
      }
    p And finally, props can be passed dynamically to route component when we navigate with API:
    :code(lang="js")
      this.$f7router.navigate('/some-page/', {
        props: {
          foo: 'bar',
          bar: true,
        }
      })
    h2 Async Lazy Components
    p With Webpack it is possible to load page components on demand, it is possible with F7's async route, for example:
    :code(lang="js")
          {
            path: '/about',
            async(routeTo, routeFrom, resolve, reject) {
              // dynamic import component; returns promise
              const vueComponent = () => import('./pages/about.vue');
              // resolve promise
              vueComponent().then((vc) => {
                // resolve with component
                resolve({ component: vc.default })
              });
            } ,
          },
    h2 Router API
    p To access router instance and use <a href="../docs/view.html#router-api-methods-properties">Router API</a> you can use special <b>$f7router</b> property of component:
    :code(lang="html")
          <f7-link @click="$f7router.navigate('/about/')">About</f7-link>
          <f7-link @click="$f7router.back()">Go Back</f7-link>
    .important-note
      p Please note, that <code>$f7route</code> and <code>$f7router</code> component properties are only available inside of custom page components that you load according to routes. In parent components (like in View, or where you init your Vue app instance) and in child components they are not accessible. So in this case use access to initialized <a href="view.html#access-to-view-instance">View Instance</a>, e.g. <code>$f7.views.main.router</code>
