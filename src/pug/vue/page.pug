extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Page Vue Component | Framework7 Vue Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu-vue
  .docs-content
    +improveDocsLink
    h1 Page Vue Component
    ul.docs-index
    p Page in Framework7 has the same meaning as when you think about web pages. Page is the main component to display and operate content.
    p Page Vue component represents Framework7's <a href="../docs/page.html">Page</a>.
    h2 Page Components
    p There are following components included:
    ul
      li <code><b>f7-page</b></code> - main page element
      li <code><b>f7-page-content</b></code> - additional inner page content element

    h2 Page Properties
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          th(colspan="4") &lt;f7-page&gt; properties
        tr
          td name
          td string
          td
          td Page name
        tr
          td stacked
          td boolean
          td
          td Enable for not currently active page if you use <code>stackedPages</code> Router parameter that keeps all pages in DOM
        tr
          td messages-content
          td boolean
          td
          td Enable if you use <a href="messages.html">Messages</a> component inside to add required extra styling
        tr
          td page-content
          td boolean
          td true
          td When enabled it automatically adds <code>page-content</code> element inside. Usefule to disable when you need to use few page-content elements for tabs
        tr
          td tabs
          td boolean
          td
          td Enable if you use Page as <a href="tabs.html">Tabs</a> wrapper
        tr
          td login-screen
          td boolean
          td
          td Enable if you use <a href="login-screen.html">Login Screen</a> inside of the page to add required extra styling
        tr
          td no-swipeback
          td boolean
          td
          td Disables swipeback feature for the current page (affects iOS theme only)
        tr
          td with-subnavbar
          td boolean
          td
          td Enable if you have Sub Navbar inside of the page
        tr
          td no-navbar
          td boolean
          td
          td Enable if you use common Navbar layout and need to hide common Navbar (or use another one) for this page (affects iOS theme only)
        tr
          td no-toolbar
          td boolean
          td
          td Enable if you use common Toolbar/Tabbar layout and need to hide Toolbar (or use another one) for this page
        tr
          td hide-bars-on-scroll
          td boolean
          td
          td Hide Navbar & Toolbar on page scroll
        tr
          td hide-navbar-on-scroll
          td boolean
          td
          td Hide Navbar on page scroll
        tr
          td hide-toolbar-on-scroll
          td boolean
          td
          td Hide Toolbar on page scroll
        tr
          td ptr
          td boolean
          td
          td Enables <a href="../docs/pull-to-refresh.html">Pull To Refresh</a>
        tr
          td ptr-distance
          td number
          td
          td Custom pull to refresh trigger distance. By default (if not specified) it is 44px.
        tr
          td ptr-preloader
          td boolean
          td true
          td Disable if you want to use custom pull to refresh preloader element
        tr
          td infinite
          td boolean
          td
          td Enables <a href="../docs/infinite-scroll.html">Infinite Scroll</a>
        tr
          td infinite-top
          td boolean
          td
          td Enables infinite scroll on top of the page
        tr
          td infinite-distance
          td boolean
          td true
          td Distance from the bottom of page (in px) to trigger infinite scroll event. By default (if not specified), it is 50 (px)
        tr
          td infinite-preloader
          td boolean
          td true
          td Disable if you want to use custom infinite-scroll preloader
        tr
          th(colspan="4") &lt;f7-page-content&gt; properties
        tr
          td tab
          td boolean
          td
          td Enable if you use page-content as Tab
        tr
          td tab-active
          td boolean
          td
          td Enable if the current tab is active
        tr
          td ptr
            <br> ptr-distance
            <br> ptr-preloader
            <br> infinite
            <br> infinite-top
            <br> infinite-distance
            <br> infinite-preloader
            <br> hide-bars-on-scroll
            <br> hide-navbar-on-scroll
            <br> hide-toolbar-on-scroll
            <br> messages-content
            <br> login-screen
          td
          td
          td Same as <code>&lt;f7-page&gt;</code> properties

    h2 Page Events
    table.events-table
      thead
        tr
          th Event
          th Description
      tbody
        tr
          th(colspan="2") &lt;f7-page&gt; events
        tr
          td page:init
          td Event will be triggered after Framework7 initialize required page's components and navbar
        tr
          td page:reinit
          td This event will be triggered in case of navigating to the page that was already initialized.
        tr
          td page:beforein
          td Event will be triggered when everything initialized and page is ready to be transitioned into view (into active/current position)
        tr
          td page:afterin
          td Event will be triggered after page transitioned into view
        tr
          td page:beforeout
          td Event will be triggered right before page is going to be transitioned out of view
        tr
          td page:afterout
          td Event will be triggered after page transitioned out of view
        tr
          td page:beforeremove
          td Event will be triggered right before Page will be removed from DOM. This event could be very useful if you need to detach some events / destroy some plugins to free memory
        tr
          td ptr:pullstart
          td Event will be triggered when you start to move pull to refresh content
        tr
          td ptr:pullmove
          td Event will be triggered during you move pull to refresh content
        tr
          td ptr:pullend
          td Event will be triggered when you release pull to refresh content
        tr
          td ptr:refresh
          td Event will be triggered when pull to refresh enters in "refreshing" state
        tr
          td ptr:done
          td Event will be triggered after pull to refresh is done and it is back to initial state (after calling <b>pullToRefreshDone</b> method)
        tr
          td infinite
          td Event will be triggered when page scroll reaches specified (in data-distance attribute) distance to the bottom.
        tr
          th(colspan="2") &lt;f7-page-content&gt; events
        tr
          td tab:show
          td Event will be triggered when Tab becomes visible/active
        tr
          td tab:hide
          td Event will be triggered when Tab becomes hidden/inactive
        tr
          td ptr:pullstart
            | <br> ptr:pullmove
            | <br> ptr:pullend
            | <br> ptr:refresh
            | <br> ptr:done
            | <br> infinite
          td Same as <code>&lt;f7-page&gt;</code> events
    h2 Page Slots
    p Page Vue component (<code>&lt;f7-page&gt;</code>) has additional slots for custom elements:
    ul
      li <code><b>default</b></code> - element will be inserted as a child of  "page-content", if <code>page-content</code> prop is enabled (by default)
      li <code><b>fixed</b></code> - element will be inserted as a direct child of "page" right before "page-content"
    :code(lang="html")
          <f7-page>
            <div slot="fixed">Fixed element</div>
            <p>Page content goes here</p>
          </f7-page>

          <!-- Renders to: -->

          <div class="page">
            <div>Fixed element</div>
            <div class="page-content">
              <p>Page content goes here</p>
            </div>
          </div>
    .with-device
      h2 Examples
      h3(data-device-preview="../docs-demos/vue/infinite-scroll.html") Infinite Scroll
      :code(lang="html")
            <template>
              <f7-page
                infinite
                :infinite-distance="50"
                :infinite-preloader="showPreloader"
                @infinite="loadMore"
              >
                <f7-navbar title="Infinite Scroll"></f7-navbar>
                <f7-block-title>Scroll bottom</f7-block-title>
                <f7-list>
                  <f7-list-item v-for="(item, index) in items" :title="`Item ${item}`" :key="index"></f7-list-item>
                </f7-list>
              </f7-page>
            </template>
            <script>
              export default {
                data() {
                  return {
                    items: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                    allowInfinite: true,
                    showPreloader: true,
                  };
                },
                methods: {
                  loadMore() {
                    const self = this;
                    if (!self.allowInfinite) return;
                    self.allowInfinite = false;

                    setTimeout(() => {
                      if (self.items.length >= 200) {
                        self.showPreloader = false;
                        return;
                      }

                      const itemsLength = self.items.length;

                      for (let i = 1; i <= 20; i += 1) {
                        self.items.push(itemsLength + i);
                      }

                      self.allowInfinite = true;
                    }, 1000);
                  },
                },
              };
            </script>
      h3(data-device-preview="../docs-demos/vue/pull-to-refresh.html") Pull To Refresh
      :code(lang="html")
            <template>
              <f7-page ptr @ptr:refresh="loadMore">
                <f7-navbar title="Pull To Refresh"></f7-navbar>
                <f7-list media-list>
                  <f7-list-item
                    v-for="(item, index) in items"
                    :key="index"
                    :title="item.title"
                    :subtitle="item.author">
                    <img slot="media" :src="item.cover" width="44" />
                  </f7-list-item>

                  <f7-block-footer>
                    <p>Just pull page down to let the magic happen.<br>Note that pull-to-refresh feature is optimised for touch and native scrolling so it may not work on desktop browser.</p>
                  </f7-block-footer>
                </f7-list>
              </f7-page>
            </template>
            <script>
              export default {
                data() {
                  return {
                    items: [
                      {
                        title: 'Yellow Submarine',
                        author: 'Beatles',
                        cover: 'http://lorempixel.com/88/88/abstract/1',
                      },
                      {
                        title: 'Don\'t Stop Me Now',
                        author: 'Queen',
                        cover: 'http://lorempixel.com/88/88/abstract/2',
                      },
                      {
                        title: 'Billie Jean',
                        author: 'Michael Jackson',
                        cover: 'http://lorempixel.com/88/88/abstract/3',
                      },
                    ],
                    songs: ['Yellow Submarine', 'Don\'t Stop Me Now', 'Billie Jean', 'Californication'],
                    authors: ['Beatles', 'Queen', 'Michael Jackson', 'Red Hot Chili Peppers'],
                  };
                },
                methods: {
                  loadMore(event, done) {
                    const self = this;

                    setTimeout(() => {
                      const picURL = `http://lorempixel.com/88/88/abstract/${Math.round(Math.random() * 10)}`;
                      const song = self.songs[Math.floor(Math.random() * self.songs.length)];
                      const author = self.authors[Math.floor(Math.random() * self.authors.length)];

                      self.items.push({
                        title: song,
                        author,
                        img: picURL,
                      });

                      done();
                    }, 1000);
                  },
                },
              };
            </script>


