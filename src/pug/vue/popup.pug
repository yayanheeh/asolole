extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Popup Vue Component | Framework7 Vue Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu-vue
  .docs-content
    +improveDocsLink
    h1 Popup Vue Component
    ul.docs-index
    p Popup is a popup window with any HTML content that pops up over App's main content. Popup as all other overlays is part of so called "Temporary Views".
    p Popup Vue component represents <a href="../docs/popup.html">Popup</a> component.
    h2 Popup Components
    p There are following components included:
    ul
      li <code><b>f7-popup</b></code> - popup element
    h2 Popup Properties
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Description
      tbody
        tr
          th(colspan="3") &lt;f7-popup&gt; properties
        tr
          td tablet-fullscreen
          td boolean
          td Defines whether the popup should be displayed fullscreen on tablets or not
        tr
          td opened
          td boolean
          td Allows to open/close Popup and set its initial state
        tr
          td backdrop
          td boolean
          td
          td Enables Popup backdrop (dark semi transparent layer behind). By default inherits same app parameter value (<code>true</code>)
        tr
          td closeByBackdropClick
          td boolean
          td
          td When enabled, popup will be closed on backdrop click. By default inherits same app parameter value (<code>true</code>)
        tr
          td animate
          td boolean
          td
          td Whether the Popup should be opened/closed with animation or not. Can be overwritten in <code>.open()</code> and <code>.close()</code> methods. By default inherits same app parameter value (<code>true</code>)
    h2 Popup Methods
    table.methods-table
      tr
        th(colspan="2") &lt;f7-popup&gt; methods
      tr
        td .open(<span>animate</span>)
        td Open popup
      tr
        td .close(<span>animate</span>)
        td Close popup
    h2 Popup Events
    table.events-table
      thead
        tr
          th Event
          th Description
      tbody
        tr
          th(colspan="2") &lt;f7-popup&gt; events
        tr
          td popup:open
          td Event will be triggered when Popup starts its opening animation
        tr
          td popup:opened
          td Event will be triggered after Popup completes its opening animation
        tr
          td popup:close
          td Event will be triggered when Popup starts its closing animation
        tr
          td popup:closed
          td Event will be triggered after Popup completes its closing animation
    h2 Open And Close Popup
    p You can control Popup state, open and closing it:
    ul
      li using <a href="../docs/popup.html">Popup API</a>
      li by passing <code>true</code> or <code>false</code> to its <code>opened</code> prop
      li by clicking on <a href="link.html">Link</a> or <a href="button.html">Button</a> with relevant <code>popup-open</code> property (to open it) and <code>popup-close</code> property to close it
    h2 Access To Popup Instance
    p You can access Popup initialized instance by accessing <code><b>.f7Popup</b></code> component's property.
    .with-device
      h2(data-device-preview="../docs-demos/vue/popup.html") Examples
      :code
            <template>
              <f7-page @page:beforeremove="onPageBeforeRemove">
                <f7-navbar title="Popup"></f7-navbar>
                <f7-block>
                  <p>
                    <f7-button raised popup-open=".demo-popup">Open Popup</f7-button>
                  </p>
                  <p>
                    <f7-button raised @click="popupOpened = true">Open Via Prop Change</f7-button>
                  </p>
                  <p>
                    <f7-button raised @click="createPopup">Create Dynamic Popup</f7-button>
                  </p>
                </f7-block>
                <f7-popup class="demo-popup" :opened="popupOpened" @popup:closed="popupOpened = false">
                  <f7-page>
                    <f7-navbar title="Popup Title">
                      <f7-nav-right>
                        <f7-link popup-close>Close</f7-link>
                      </f7-nav-right>
                    </f7-navbar>
                    <f7-block>
                      <p>Here comes popup. You can put here anything, even independent view with its own navigation. Also not, that by default popup looks a bit different on iPhone/iPod and iPad, on iPhone it is fullscreen.</p>
                      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                      <p>Duis ut mauris sollicitudin, venenatis nisi sed, luctus ligula...</p>
                    </f7-block>
                  </f7-page>
                </f7-popup>
              </f7-page>
            </template>

            <script>
              export default {
                data() {
                  return {
                    popupOpened: false,
                  };
                },
                methods: {
                  createPopup() {
                    const self = this;
                    // Create popup
                    if (!self.popup) {
                      self.popup = self.$f7.popup.create({
                        content: `
                          <div class="popup">
                            <div class="page">
                              <div class="navbar">
                                <div class="navbar-inner">
                                  <div class="title">Dynamic Popup</div>
                                  <div class="right"><a href="#" class="link popup-close">Close</a></div>
                                </div>
                              </div>
                              <div class="page-content">
                                <div class="block">
                                  <p>This popup was created dynamically</p>
                                  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse faucibus mauris leo, eu bibendum neque congue non...</p>
                                </div>
                              </div>
                            </div>
                          </div>
                        `.trim(),
                      });
                    }
                    // Open it
                    self.popup.open();
                  },
                  onPageBeforeRemove() {
                    const self = this;
                    // Destroy popup when page removed
                    if (self.popup) self.popup.destroy();
                  },
                },
              };
            </script>
