extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Photo Browser Vue Component | Framework7 Vue Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu-vue
  .docs-content
    +improveDocsLink
    h1 Photo Browser Vue Component
    ul.docs-index
    p Photo Browser is an photo browser component to display collection of photos / images. Photos can be zoomed and panned (optional).
    p Photo Browser Vue component represents Framework7's <a href="../docs/photo-browser.html">Photo Browser</a> component.
    .important-note
      p Photo Browser Vue component doesn't render any output. It can be used to create JS Photo Browser instance and control it inside of your Vue component.
    h2 Photo Browser Component
    p There are following components included:
    ul
      li <code><b>f7-photo-browser</b></code>
    h2 Photo Browser Properties
    p You can pass all parameters in single <code>params</code> property or use separate props for each parameter to specify them via component properties:
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          th(colspan="4") &lt;f7-photo-browser&gt; properties
        tr
          td init
          td boolean
          td true
          td Initializes Photo Browser
        tr
          td params
          td Object
          td
          td Object with <a href="../docs/photo-browser.html#photo-browser-parameters">Photo Browser parameters</a>
        tr
          td photos
          td array
          td []
          td Array with URLs of photos or array of objects with "url" (or "html") and "caption" properties.
        tr
          td url
          td string
          td photos/
          td Photo browser modal URL that will be set as a current route
        tr
          td routable-modals
          td boolean
          td true
          td Will add opened photo browser to router history which gives ability to close photo browser by going back in router history and set current route to the photo browser modal
        tr
          td swiper
          td object
          td
          td Object with Swiper parameters. By default equals to:
            :code(lang="js")
                  swiper: {
                    initialSlide: 0,
                    spaceBetween: 20,
                    speed: 300,
                    loop: false,
                    preloadImages: true,
                    navigation: {
                      nextEl: '.photo-browser-next',
                      prevEl: '.photo-browser-prev',
                    },
                    zoom: {
                      enabled: true,
                      maxRatio: 3,
                      minRatio: 1,
                    },
                    lazy: {
                      enabled: true,
                    },
                  },
        tr
          td virtualSlides
          td boolean
          td true
          td When enabled then Swiper will use Virtual Slides
        tr
          td exposition
          td boolean
          td true
          td Enable disable exposition mode when clicking on Photo Browser.
        tr
          td exposition-hide-captions
          td boolean
          td false
          td Set to true if you also want to hide captions in exposition mode
        tr
          td swipe-to-close
          td boolean
          td true
          td You can close Photo Browser with swipe up/down when this parameter is enabled
        tr
          td type
          td string
          td standalone
          td Define how Photo Browser should be opened. Could be <code>standalone</code> (will be opened as an overlay with custom transition effect), <code>popup</code> (will be opened as popup), <code>page</code> (will be injected to View and loaded as a new page).
        tr
          td theme
          td string
          td light
          td Photo Browser color theme, could be <code>light</code> or <code>dark</code>
        tr
          td captions-theme
          td string
          td
          td Captions color theme, could be also <code>dark</code> or <code>light</code>. By default, equal to "theme" parameter
        tr
          td navbar
          td boolean
          td true
          td Set to false to remove Photo Browser's Navbar
        tr
          td toolbar
          td boolean
          td true
          td Set to false to remove Photo Browser's Toolbar
        tr
          td back-link-text
          td string
          td Close
          td Text on back link in Photo Browser's Navbar
        tr
          td navbar-of-text
          td string
          td of
          td Text of "of" in photos counter: "3 of 5"
        tr
          td icons-color
          td string
          td
          td One of the <a href="../docs/color-themes.html">default colors</a>
    h2 Photo Browser Events
    table.events-table
      thead
        tr
          th Event
          th Description
      tbody
        tr
          th(colspan="2") &lt;f7-photo-browser&gt; events
        tr
          td photobrowser:open
          td Event will be triggered on Photo Browser open.
        tr
          td photobrowser:opened
          td Event will be triggered after Photo Browser completes its opening animation
        tr
          td photobrowser:close
          td Event will be triggered on Photo Browser close.
        tr
          td photobrowser:closed
          td Event will be triggered after Photo Browser completes its closing animation
        tr
          td photobrowser:swipetoclose
          td This event will be triggered when user close Photo Browser with swipe up/down.
    h2 Photo Browser Methods
    p The following Photo Browser components methods are available (e.g. by accesing it via <b>$refs</b>):
    table.methods-table
      tbody
        tr
          th(colspan="2") &lt;f7-photo-browser&gt; methods
        tr
          td .open(<span>index</span>);
          td Open Photo Browser on photo with index number equal to "index" parameter. If "index" parameter is not specified, it will be opened on last closed photo.
        tr
          td .close();
          td Close Photo Browser
        tr
          td .expositionToggle();
          td Toggle exposition mode
        tr
          td .expositionEnable();
          td Enable exposition mode
        tr
          td .expositionDisable();
          td Disable exposition mode
    h2 Access To Photo Browser Instance
    p You can access Photo Browser initialized instance by accessing <code><b>.f7PhotoBrowser</b></code> component's property.
    .with-device
      h2(data-device-preview="../docs-demos/vue/photo-browser.html") Examples
      :code(lang="html")
            <template>
              <f7-page>
                <f7-navbar title="Photo Browser"></f7-navbar>

                <f7-block>
                  <p>Photo Browser could be opened in a three ways - as a Standalone component (Popup modification), in Popup, and as separate Page:</p>
                  <f7-row>
                    <f7-col>
                      <f7-photo-browser
                        :photos="photos"
                        ref="standalone"
                      ></f7-photo-browser>
                      <f7-button raised @click="$refs.standalone.open()">Standalone</f7-button>
                    </f7-col>
                    <f7-col>
                      <f7-photo-browser
                        :photos="photos"
                        type="popup"
                        ref="popup"
                      ></f7-photo-browser>
                      <f7-button raised @click="$refs.popup.open()">Popup</f7-button>
                    </f7-col>
                    <f7-col>
                      <f7-photo-browser
                        :photos="photos"
                        type="page"
                        back-link-text="Back"
                        ref="page"
                      ></f7-photo-browser>
                      <f7-button raised @click="$refs.page.open()">Page</f7-button>
                    </f7-col>
                  </f7-row>
                </f7-block>

                <f7-block>
                  <p>Photo Browser suppots 2 default themes - default Light (like in previous examples) and Dark theme. Here is a Dark theme examples:</p>
                  <f7-row>
                    <f7-col>
                      <f7-photo-browser
                        :photos="photos"
                        theme="dark"
                        ref="standaloneDark"
                      ></f7-photo-browser>
                      <f7-button raised @click="$refs.standaloneDark.open()">Standalone</f7-button>
                    </f7-col>
                    <f7-col>
                      <f7-photo-browser
                        :photos="photos"
                        theme="dark"
                        type="popup"
                        ref="popupDark"
                      ></f7-photo-browser>
                      <f7-button raised @click="$refs.popupDark.open()">Popup</f7-button>
                    </f7-col>
                    <f7-col>
                      <f7-photo-browser
                        :photos="photos"
                        theme="dark"
                        type="page"
                        back-link-text="Back"
                        ref="pageDark"
                      ></f7-photo-browser>
                      <f7-button raised @click="$refs.pageDark.open()">Page</f7-button>
                    </f7-col>
                  </f7-row>
                </f7-block>
              </f7-page>
            </template>
            <script>
              export default {
                data() {
                  return {
                    photos: [
                      {
                        url: 'img/beach.jpg',
                        caption: 'Amazing beach in Goa, India',
                      },
                      'http://placekitten.com/1024/1024',
                      'img/lock.jpg',
                      {
                        url: 'img/monkey.jpg',
                        caption: 'I met this monkey in Chinese mountains',
                      },
                      {
                        url: 'img/mountains.jpg',
                        caption: 'Beautiful mountains in Zhangjiajie, China',
                      },
                    ],
                  };
                },
              }
            </script>