extends ../_docs-template

block vars
  - var activeLink = 'vue';
  - var title = 'Virtual List Vue Component | Framework7 Vue Documentation';

block content
  include ../_docs-demo-device

  .docs-nav
    include ../_docs-menu-vue
  .docs-content
    +improveDocsLink
    h1 Virtual List Vue Component
    ul.docs-index
    p Virtual List is not a separate Vue component, but just a particular case of using <a href="list-view.html">&lt;f7-list&gt;</a>, <a href="list-item.html">&lt;f7-list-item&gt;</a> Vue components and special Framework7's <a href="../docs/virtual-list.html">Virtual List</a> component.

    h2 Virutal List Properties
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          th(colspan="4") &lt;f7-list&gt; properties
        tr
          td virtual-list
          td boolean
          td false
          td Enables Virtual List
        tr
          td virtual-list-params
          td object
          td
          td Object with <a href="../docs/virtual-list.html#virtual-list-parameters">Virtual List Parameters</a>

    h2 Virutal List Events
    table.events-table
      thead
        tr
          th Event
          th Description
      tbody
        tr
          th(colspan="2") &lt;f7-list&gt; events
        tr
          td virtual:itembeforeinsert
          td Event will be triggered before item will be added to virtual document fragment
        tr
          td virtual:itemsbeforeinsert
          td Event will be triggered after current DOM list will be removed and before new document will be inserted
        tr
          td virtual:itemsafterinsert
          td Event will be triggered after new document fragment with items inserted
        tr
          td virtual:beforeclear
          td Event will be triggered before current DOM list will be removed and replaced with new document fragment

    h2 Access To Virtual List Instance
    p You can access Virtual List initialized instance by accessing <code><b>.f7VirtualList</b></code> &lt;f7-list&gt; component's property.

    .with-device
      h2(data-device-preview="../docs-demos/vue/virtual-list.html") Examples
      p Here is the full page example with Virtual List and Searchbar to search through Virtual List items:
      :code
            <template>
              <f7-page>
                <f7-navbar title="Virtual List">
                  <f7-subnavbar :inner="false">
                    <f7-searchbar
                      search-container=".virtual-list"
                      search-item="li"
                      search-in=".item-title"
                    ></f7-searchbar>
                  </f7-subnavbar>
                </f7-navbar>
                <f7-block>
                  <p>Virtual List allows to render lists with huge amount of elements without loss of performance. And it is fully compatible with all Framework7 list components such as Search Bar, Infinite Scroll, Pull To Refresh, Swipeouts (swipe-to-delete) and Sortable.</p>
                  <p>Here is the example of virtual list with 10 000 items:</p>
                </f7-block>
                <f7-list class="searchbar-not-found">
                  <f7-list-item title="Nothing found"></f7-list-item>
                </f7-list>
                <f7-list
                  class="searchbar-found"
                  media-list
                  virtual-list
                  :virtual-list-params="{ items, searchAll, renderExternal, height: $theme.ios ? 63 : 73}"
                >
                  <ul>
                    <f7-list-item
                      v-for="(item, index) in vlData.items"
                      :key="index"
                      media-item
                      link="#"
                      :title="item.title"
                      :subtitle="item.subtitle"
                      :style="`top: ${vlData.topPosition}px`"
                    ></f7-list-item>
                  </ul>
                </f7-list>
              </f7-page>
            </template>
            <script>
              export default {
                data() {
                  const items = [];
                  for (let i = 1; i <= 10000; i += 1) {
                    items.push({
                      title: `Item ${i}`,
                      subtitle: `Subtitle ${i}`,
                    });
                  }
                  return {
                    items,
                    vlData: {
                      items: [],
                    },
                  };
                },
                methods: {
                  searchAll(query, items) {
                    const found = [];
                    for (let i = 0; i < items.length; i += 1) {
                      if (items[i].title.toLowerCase().indexOf(query.toLowerCase()) >= 0 || query.trim() === '') found.push(i);
                    }
                    return found; // return array with mathced indexes
                  },
                  renderExternal(vl, vlData) {
                    this.vlData = vlData;
                  },
                },
              };
            </script>
