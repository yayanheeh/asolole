extends ../_docs-template

block vars
  - var activeLink = 'react';
  - var title = 'Navigation Router | Framework7 React Documentation';

block content

  .docs-nav
    include ../_docs-menu-react
  .docs-content
    +improveDocsLink
    h1 Navigation Router
    ul.docs-index
    p Framework7-React as Framework7 itself comes with powerful and flexible router. And to make it work we must specify <a href="../docs/routes.html">Routes</a>.
    p The only difference in Framework7-React is that in React.js we are already composing our application with React components, so we need to map our Pages (React components) to the routes. It can be done by passing React component in <code>component</code> property of the route. Here's a basic example:
    :code(lang="jsx")
          // App.jsx

          // Import pages components
          import HomePage from 'home.jsx';
          import AboutPage from 'about.jsx';
          import LoginPage from 'login.jsx';

          /*
            Now we need to map components to routes.
            We need to pass them along with the F7 app parameters to <App> component
          */

          const f7params = {
            name: 'My App',
            id: 'com.myapp.test',
            // specify routes for app
            routes: [
              {
                path: '/',
                component: HomePage,
              },
              {
                path: '/about/',
                component: AboutPage,
              },
              {
                path: '/login/',
                component: LoginPage,
              },
            ],
          };

          export default () => (
            <App params={f7params}>
              {/* Current View/Router, initial page will be loaded from home.jsx component */}
              <View main url="/" />
            </App>
          )

    :code(lang="jsx")
          // home.jsx
          export default () => (
            <Page name="home">
              <Navbar title="Home Page" />
              ...
              <Link href="/about/">About Page</Link>
              <Link href="/login/">Login Page</Link>
            </Page>
          )
    :code(lang="jsx")
          // about.jsx
          export default () => (
            <Page name="about">
              <Navbar title="About" />
              {/* Page content */}
              ...
            </Page>
          )
    :code(lang="jsx")
          // login.jsx
          export default () => (
            <Page name="login">
              <Navbar title="Login" />
              {/* Page content */}
              ...
            </Page>
          )

    .important-note
      p Check the full <a href="../docs/routes.html">Routes Documentation</a> to know about all possible routes options, how to use <a href="../docs/routes.html#nested-routes">Nested Routes</a>, <a href="../docs/routes.html#routable-tabs">Routable Tabs</a> and <a href="../docs/routes.html#routable-modals">Routable Modals</a>.

    h2 Pass Props To Components
    p It is possible to pass component props to Vue components loaded by router. There are few ways to do it.
    p First of all, all route params will be automatically passed as props to component, e.g.
    :code(lang="js")
      // route with params
      {
        path: '/blog/:postId/comments/:commentId/',
        component: BlogPost,
      }
    p So if we navigate by <code>/blog/45/comments/122/</code> URL, then the following data will be passed to props:
    :code(lang="js")
      {
        postId: '45',
        commentId: '122',
      }
    p Another option is to specify props in route's <code>options</code>:
    :code(lang="js")
      {
        path: '/some-page/',
        component: SomeComponent,
        options: {
          props: {
            foo: 'bar',
            bar: true,
          },
        },
      }
    p And finally, props can be passed dynamically to route component when we navigate with API:
    :code(lang="js")
      this.$f7router.navigate('/some-page/', {
        props: {
          foo: 'bar',
          bar: true,
        }
      })

    h2 Async Lazy Components
    p With Webpack it is possible to load page components on demand, it is possible with F7's async route, for example:
    :code(lang="js")
          {
            path: '/about/',
            async(routeTo, routeFrom, resolve, reject) {
              // dynamic import component; returns promise
              const reactComponent = () => import('./pages/about.jsx');
              // resolve promise
              reactComponent().then((rc) => {
                // resolve with component
                resolve({ component: rc.default })
              });
            } ,
          },

    h2 Router API
    p To access router instance and use <a href="../docs/view.html#router-api-methods-properties">Router API</a> you can use special <b>$f7router</b> property of component:
    :code(lang="jsx")
          <Link onClick={() => this.$f7router.navigate('/about/')}>About</Link>
          <Link onClick={() => this.$f7router.back()}>Go Back</Link>
    .important-note
      p Please note, that <code>$f7route</code> and <code>$f7router</code> component properties are only available inside of custom page components that you load according to routes. In parent components (like in View, or where you init your React app instance) and in child components they are not accessible. So in this case use access to initialized <a href="view.html#access-to-view-instance">View Instance</a>, e.g. <code>$f7.views.main.router</code>
